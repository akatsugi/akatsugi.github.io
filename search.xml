<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World,Hexo</title>
    <url>/2020/11/16/Hexo/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>个人服务器搭建</title>
    <url>/2021/11/10/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="阿里云购买服务器"><a href="#阿里云购买服务器" class="headerlink" title="阿里云购买服务器"></a>阿里云购买服务器</h2><h2 id="安全组设置"><a href="#安全组设置" class="headerlink" title="安全组设置"></a>安全组设置</h2><p>Linux防火墙的端口开完后，一定还需要在阿里云设置安全组规则，开放端口号，否则外部无法访问<br><img src="https://files.catbox.moe/sa3bbm.png"></p>
<h2 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h2><span id="more"></span>

<ol>
<li>获取公网IP：我的： (公) 120.76.216.104 (内) 172.22.59.212</li>
<li>修改自己的登录密码</li>
<li>下载Xshell远程连接工具，XFTP文件上传</li>
</ol>
<p><img src="https://files.catbox.moe/r0m11l.png"></p>
<p><img src="https://files.catbox.moe/ks8ks2.png"></p>
<p>上传文件使用xftp</p>
<p><img src="https://files.catbox.moe/wonpe2.png"></p>
<h2 id="Linux系统"><a href="#Linux系统" class="headerlink" title="Linux系统"></a>Linux系统</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>一切皆文件</p>
<p>根目录/</p>
<p><img src="https://files.catbox.moe/sc9wmt.png"></p>
<ul>
<li>/bin Binary，存放常使用的命令</li>
<li>/boot 存放Linux的核心文件（链接文件和镜像文件）</li>
<li>/dev Device</li>
<li><strong>/etc 存放系统管理所需要的配置文件和子目录</strong> Redis配置等</li>
<li><strong>/home 用户目录的主目录</strong></li>
<li>/lib 存放系统最基本的动态共享库类似dll文件</li>
<li>/lost+found 一般为空，当系统非法关机后，存放一些文件</li>
<li>/media U盘，光驱等设备，识别后会挂载在此目录下</li>
<li>/mnt 让用户临时挂载别的文件系统</li>
<li><strong>/opt 给主机额外安装软件所摆放的目录</strong> 按照MySQL，Redis等等</li>
<li>/proc 系统内存的映射，可通过此目录获取系统信息</li>
<li>/root 系统管理员</li>
<li>/sbin s==SuperUser 存放系统管理员使用的系统管理程序</li>
<li>/srv 存放一些服务启动后需要提取的数据</li>
<li>/tmp 存放临时文件</li>
<li><strong>/usr 用户程序和文件都存放在此</strong></li>
<li>/usr/bin 系统用户使用的应用程序</li>
<li>/usr/sbin 超级用户使用的</li>
<li>/usr/src 内核源代码</li>
<li>/var 存放一些不断扩充的东西， 习惯将那些经常修改的目录放在此，如日志文件</li>
<li>/run 临时文件系统 存储系统启动以来的信息</li>
</ul>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="rpm（jdk）"><a href="#rpm（jdk）" class="headerlink" title="rpm（jdk）"></a>rpm（jdk）</h3><ol>
<li>jdk的rpm包</li>
<li>安装java环境<ol>
<li>检查java环境</li>
<li><img src="https://files.catbox.moe/5zrjx0.png"></li>
<li>rpm -ivh rpm包</li>
<li><img src="https://ftp.bmp.ovh/imgs/2021/11/d8144ddc19f16b2b.png"></li>
<li></li>
</ol>
</li>
<li>配置环境变量<ol>
<li>rpm安装不需要配置环境变量</li>
</ol>
</li>
<li>卸载 <code>rpm -qa|grep jdk</code> <code>rpm -e --nodeps jdk******</code></li>
</ol>
<h3 id="解压缩-tomcat"><a href="#解压缩-tomcat" class="headerlink" title="解压缩(tomcat)"></a>解压缩(tomcat)</h3><ol>
<li>tar.gz</li>
<li>解压<code>tar -zxvf ******.tar.gz</code></li>
<li>启动Tomcat测试 <code>./xx.sh</code>脚本执行</li>
</ol>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/1b647f615165d9a7.png"></p>
<ol start="4">
<li>防火墙打开8080端口</li>
</ol>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/777cb9e855cfb8b4.png"></p>
<h3 id="yum在线安装-docker"><a href="#yum在线安装-docker" class="headerlink" title="yum在线安装(docker)"></a>yum在线安装(docker)</h3><ol>
<li>安装准备环境<ol>
<li><code>yum -y install 包名</code></li>
<li>gcc:<code>yum -y install gcc</code></li>
<li>gcc-c++<code>yum -y install gcc-c++</code></li>
<li>清除旧版本</li>
</ol>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y remove docker docker-common docker-selinux docker-engine</span><br><span class="line"></span><br><span class="line">yum remove</span><br><span class="line">docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>安装yum-utils软件包<code>sudo yum install -y yum-utils</code></li>
<li>设置镜像仓库</li>
<li><pre><code class="bash">sudo yum-config-manager \
--add-repo \
https://download.docker.com/linux/centos/docker-ce.repo
</code></pre>
</li>
<li>更新yum软件包索引<code>yum makecache fast</code></li>
<li>安装docker<code>sudo yum install docer-ce docker-ce-cli</code></li>
<li>启动docker<code>sudo systemctl start docker</code></li>
<li>使用<code>docker version</code>判断是否安装成功</li>
<li><img src="https://ftp.bmp.ovh/imgs/2021/11/498b6c897ca92ddf.png"></li>
<li>HelloWorld测试</li>
<li><img src="https://ftp.bmp.ovh/imgs/2021/11/94df31373b1f0261.png"><a href="https://https//docs.docker.com/engine/install/centos/">官方文档</a></li>
</ol>
<h4 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h4><p><img src="https://ftp.bmp.ovh/imgs/2021/11/efca611a0c3db03d.png"></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/fa2e438b4a0065b1.png"></p>
]]></content>
      <tags>
        <tag>实践</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客搭建</title>
    <url>/2021/11/01/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h1><p>node -v    #查看node版本<br>npm -v    #查看npm版本<br>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a>    #安装淘宝的cnpm 管理器<br>cnpm -v    #查看cnpm版本<br>cnpm install -g hexo-cli    #安装hexo框架<br>hexo -v    #查看hexo版本</p>
<span id="more"></span>

<p>mkdir blog    #创建blog目录<br>cd blog     #进入blog目录<br>sudo hexo init     #生成博客 初始化博客<br>hexo s    #启动本地博客服务<br><a href="http://localhost:4000/">http://localhost:4000/</a>    #本地访问地址<br>hexo n 我的第一篇文章 #创建新的文章</p>
<h1 id="返回blog目录"><a href="#返回blog目录" class="headerlink" title="返回blog目录"></a>返回blog目录</h1><p>hexo clean #清理<br>hexo g #生成</p>
<h1 id="Github创建一个新的仓库-YourGithubName-github-io"><a href="#Github创建一个新的仓库-YourGithubName-github-io" class="headerlink" title="Github创建一个新的仓库 YourGithubName.github.io"></a>Github创建一个新的仓库 YourGithubName.github.io</h1><h2 id="cnpm-install-–save-hexo-deployer-git-在blog目录下安装git部署插件"><a href="#cnpm-install-–save-hexo-deployer-git-在blog目录下安装git部署插件" class="headerlink" title="cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件"></a>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件</h2><h1 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h1><hr>
<h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>type: git<br>repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git">https://github.com/YourGithubName/YourGithubName.github.io.git</a><br>branch: master</p>
<hr>
<p>hexo d    #部署到Github仓库里<br><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a>  #访问这个地址可以查看博客</p>
<p>git clone <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia  #下载yilia主题到本地</p>
<h1 id="修改hexo根目录下的-config-yml-文件-：-theme-yilia"><a href="#修改hexo根目录下的-config-yml-文件-：-theme-yilia" class="headerlink" title="修改hexo根目录下的 _config.yml 文件 ： theme: yilia"></a>修改hexo根目录下的 _config.yml 文件 ： theme: yilia</h1><p>hexo c    #清理一下<br>hexo g    #生成<br>hexo d    #部署到远程Github仓库<br><a href="https://yourgithubname.github.io/">https://YourGithubName.github.io/</a></p>
<h1 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h1>]]></content>
      <tags>
        <tag>实践</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义注解</title>
    <url>/2021/08/03/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="注解类"><a href="#注解类" class="headerlink" title="注解类"></a>注解类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">//作用于方法</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span> <span class="comment">// 运行时有效</span></span><br><span class="line"><span class="meta">@Documented</span> <span class="comment">//被 javadoc工具记录</span></span><br><span class="line"><span class="meta">@Inherited</span> <span class="comment">//可继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BatchQuery &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p><code>@interface</code></p>
<p>在底层实现上，所有定义的注解都会自动继承java.lang.annotation.Annotation接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> <span class="comment">//标注增强处理类（切面类）</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//交由Spring容器管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CherryAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="pointcut注解"><a href="#pointcut注解" class="headerlink" title="@pointcut注解"></a><code>@pointcut</code>注解</h2><p>Pointcut(切入点)： JoinPoint的集合，是程序中需要注入Advice的位置的集合，指明Advice要在什么样的条件下才能被触发，在程序中主要体现为书写切入点表达式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;@annotation(com.ztesoft.zsmart.pot.annotation.BatchQuery)&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="Around注解"><a href="#Around注解" class="headerlink" title="@Around注解"></a><code>@Around</code>注解</h2><p>@Around注解：可以用来在调用一个具体方法前和调用后来完成一些具体的任务。</p>
<p>=<code>@Before</code>+<code>@After</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>也可以不使用<code>@pointcut</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用controller包下的任意类的任意方法时均会调用此方法</span></span><br><span class="line"><span class="meta">@Around(&quot;execution(* com.company.controller.*.*(..))&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">run1</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="comment">//获取方法参数值数组</span></span><br><span class="line">  Object[] args = joinPoint.getArgs();</span><br><span class="line">  <span class="comment">//得到其方法签名</span></span><br><span class="line">  MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">  <span class="comment">//获取方法参数类型数组</span></span><br><span class="line">  Class[] paramTypeArray = methodSignature.getParameterTypes();</span><br><span class="line">  .......</span><br><span class="line">  logger.info(<span class="string">&quot;请求参数为&#123;&#125;&quot;</span>,args);</span><br><span class="line">  <span class="comment">//动态修改其参数</span></span><br><span class="line">  <span class="comment">//注意，如果调用joinPoint.proceed()方法，则修改的参数值不会生效，必须调用joinPoint.proceed(Object[] args)</span></span><br><span class="line">  Object result = joinPoint.proceed(args);</span><br><span class="line">  logger.info(<span class="string">&quot;响应结果为&#123;&#125;&quot;</span>,result);</span><br><span class="line">   <span class="comment">//如果这里不返回result，则目标对象实际返回值会被置为null</span></span><br><span class="line">  <span class="keyword">return</span> result;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>如果我们还想利用其进行参数的修改，则调用时必须用joinPoint.proceed(Object[] args)方法，将修改后的参数进行回传。如果用joinPoint.proceed()方法，则修改后的参数并不会真正被使用。</strong></p>
]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Security</title>
    <url>/2021/07/30/SpringSecurity/SpringSecurity/</url>
    <content><![CDATA[<h1 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h1><p><a href="/https://blog.csdn.net/qq_40298902/article/details/106433192">CSDN实例</a></p>
<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>SpringSecurity本质是一个过滤器链</p>
<span id="more"></span>
<ul>
<li><p>FilterSecurityInterceptor：方法级的权限过滤器，基本位于过滤链的最底部</p>
</li>
<li><p>ExceptionTranslationFilter:异常过滤器，用来处理再认证授权过程中抛出的异常</p>
<ul>
<li>这两个Filter通常是结合在一起用的，前者负责处理后者所抛出的异常并做相应的处理，后者主要用于鉴权。<code>ExceptionTranslationFilter</code>在处理异常时，如果异常为<code>AuthenticationException</code>类型，表示用户认证都失败了(比如还没有经过认证)，此时将调用<code>AuthenticationEntryPoint</code>开启认证过程，比如向用户展示登录页面；如果异常为<code>AccessDeniedException</code>，表示用户可能已经登录但是没有足够的权限，此时将调用<code>AccessDeniedHandler</code>，比如向用户展示“你没有权限”的通知页面。</li>
</ul>
</li>
<li><p>UsernamePasswordAuthenticationFilter：对<code>/login</code>的POST请求做拦截，校验表单中用户名密码</p>
<ul>
<li>用于处理基于Form登录的认证，认证成功重定向到指定页面，认证失败向用户重新返回登录界面并提示错误。<code>UsernamePasswordAuthenticationFilter</code>继承自<code>AbstractAuthenticationProcessingFilter</code>，<code>AbstractAuthenticationProcessingFilter</code>可以配置一个<code>AuthenticationSuccessHandler</code>和一个<code>AuthenticationFailureHandler</code>，认证成功之后将调用<code>AuthenticationSuccessHandler</code>，比如像<code>UsernamePasswordAuthenticationFilter</code>一样重定向到某个页面，也可以根据自定义向用户返回一个JWT的Token；认证失败(比如用户名或密码不正确)后将调用<code>AuthenticationFailureHandler</code>，比如像<code>UsernamePasswordAuthenticationFilter</code>一样重新返回登录页面，也可以根据自定义向用户返回一个401状态码。</li>
<li><code>AbstractAuthenticationProcessingFilter</code>并不完成认证逻辑，而是将其交给<code>AuthenticationManager</code>，<code>AuthenticationManager</code>进而代理给<code>AuthenticationProvider</code>，<code>AuthenticationProvider</code>验证用户提供的凭证是否正确(比如从数据库加载用户的密码然后与用户提供的密码对比，或者与LDAP服务器通信验证用户名和密码)。</li>
</ul>
</li>
</ul>
<h3 id="过滤器加载"><a href="#过滤器加载" class="headerlink" title="过滤器加载"></a>过滤器加载</h3><ol>
<li>使用SpringSecurity配置过滤器<ol>
<li>DelegatingFilterProxy</li>
</ol>
</li>
</ol>
<p><img src="https://files.catbox.moe/lay6v0.png" alt="Filter"></p>
<h2 id="UserDetailsService接口"><a href="#UserDetailsService接口" class="headerlink" title="UserDetailsService接口"></a>UserDetailsService接口</h2><p>自定义账号密码逻辑，数据库？内存？ （redis?</p>
<p>查询数据库用户名和密码的过程</p>
<ul>
<li>创建类继承UsernamePasswordAuthenticationFilter，重写其中三个方法<ul>
<li>attemptAuthentication 判断用户名密码</li>
<li>successfulAuthentication 成功</li>
<li>unsuccessfulAuthentication 失败</li>
</ul>
</li>
<li>创建类实现UserDetailsService接口，编写查询数据过程，返回User对象（User对象是安全框架提供的对象）</li>
</ul>
<h2 id="PasswordEncoder"><a href="#PasswordEncoder" class="headerlink" title="PasswordEncoder"></a>PasswordEncoder</h2><p>对密码加密接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BCryptPasswordEncoder bCryptPasswordEncoder =<span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">String pwd=bCryptPasswordEncoder.encode(<span class="string">&quot;password&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="web权限方案"><a href="#web权限方案" class="headerlink" title="web权限方案"></a>web权限方案</h2><p><strong>认证</strong>与<strong>授权</strong></p>
<h3 id="设置登录用户名密码"><a href="#设置登录用户名密码" class="headerlink" title="设置登录用户名密码"></a>设置登录用户名密码</h3><ol>
<li><p>配置文件</p>
<p>application.properties中</p>
<ol>
<li>spring.security.user.name=</li>
<li>spring.security.user.password=</li>
</ol>
</li>
<li><p>配置类</p>
<ol>
<li>@Configuration</li>
<li>extends WebSecurityConfigurerAdapter</li>
<li><img src="https://files.catbox.moe/6zo8c1.png"></li>
</ol>
</li>
<li><p>自定义实现类UserDetailsService</p>
<ol>
<li>创建配置类，设置使用哪个userDetailsService实现类<ol>
<li><img src="https://files.catbox.moe/ej0nnn.png"></li>
</ol>
</li>
<li>编写实现类，返回User对象，User对象有用户名密码和操作<ol>
<li><img src="https://files.catbox.moe/rrcq8k.png"></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ol>
<li>引入依赖</li>
<li>创建数据库</li>
<li>创建实体类Users</li>
<li>创建mapper接口,<code>interface UserMapper</code> ,增删改查函数</li>
<li>mapper.xml文件对应接口的增删改查 (使用MyBatis-Plus可简化45，接口继承BaseMapper&lt;Users&gt;)</li>
<li>在UserDetailsService的自定义实现类中调用mapper中的方法查询数据库对用户的认证信息（根据username查询）</li>
<li>在启动类中添加@MapperScan(“Mapper所在包”)注释</li>
<li>配置文件中配置数据库信息<ol>
<li><img src="https://files.catbox.moe/whr6u5.png"></li>
<li>springBoot2默认使用Mysql8;driver-class-name加cj;设置时区</li>
</ol>
</li>
</ol>
<h2 id="配置类configure设置"><a href="#配置类configure设置" class="headerlink" title="配置类configure设置"></a>配置类configure设置</h2><p>自定义登录页面、403页面等</p>
<p><img src="https://files.catbox.moe/j63v8t.png" alt="config"></p>
<p><img src="https://files.catbox.moe/cjkuom.png" alt="403"></p>
<h2 id="基于角色和权限实现访问控制"><a href="#基于角色和权限实现访问控制" class="headerlink" title="基于角色和权限实现访问控制"></a>基于角色和权限实现访问控制</h2><h3 id="1-hasAuthority"><a href="#1-hasAuthority" class="headerlink" title="1. hasAuthority"></a>1. hasAuthority</h3><p>如果当前主体具有指定的权限，有则返回true，否则false</p>
<p><img src="https://files.catbox.moe/jeqjyj.png" alt="hasAuthority"></p>
<h3 id="2-hasAnyAuthority"><a href="#2-hasAnyAuthority" class="headerlink" title="2. hasAnyAuthority"></a>2. hasAnyAuthority</h3><p><img src="https://files.catbox.moe/bzvoxj.png"></p>
<h3 id="3-hasRole"><a href="#3-hasRole" class="headerlink" title="3. hasRole"></a>3. hasRole</h3><p>底层代码中将role改为了ROLE_#{role}</p>
<p><img src="https://files.catbox.moe/zoontv.png"></p>
<h3 id="4-hasAnyRole"><a href="#4-hasAnyRole" class="headerlink" title="4. hasAnyRole"></a>4. hasAnyRole</h3><p>同上</p>
<h2 id="注解使用"><a href="#注解使用" class="headerlink" title="注解使用"></a>注解使用</h2><h3 id="Secured"><a href="#Secured" class="headerlink" title="@Secured"></a>@Secured</h3><p>判断用户是否具有角色（其中匹配的字符串需要加上前缀”ROLE_”)</p>
<p>开启注解功能<code>@EnableGlobalMethodSecurity(securedEnable=true)</code></p>
<p>在控制器方法上放添加<code>@Secured(&#123;&quot;ROLE_normal&quot;,&quot;ROLE_admin&quot;&#125;)</code></p>
<p><img src="https://files.catbox.moe/0av96c.png"></p>
<h3 id="PreAuthorize"><a href="#PreAuthorize" class="headerlink" title="@PreAuthorize"></a>@PreAuthorize</h3><p>在进入方法前进行权限验证</p>
<p><code>@PreAuthorize(&quot;hasAnyAuthority(&#39;admins&#39;)&quot;)</code>四个方法都可以填在( )里面</p>
<p>开启注解功能<code>@EnableGlobalMethodSecurity(prePostEnabled=true)</code></p>
<p><img src="https://files.catbox.moe/do2cpo.png"></p>
<h3 id="PostAuthorize"><a href="#PostAuthorize" class="headerlink" title="@PostAuthorize"></a>@PostAuthorize</h3><p>方法执行之后进行权限验证，多用于返回值</p>
<p>开启注解功能<code>@EnableGlobalMethodSecurity(prePostEnabled=true)</code></p>
<p><code>@PostAuthorize(&quot;hasAnyAuthority(&#39;admins&#39;)&quot;)</code>四个方法都可以填在( )里面</p>
<p><img src="https://files.catbox.moe/zh6p22.png"></p>
<p>test:</p>
<p><img src="https://files.catbox.moe/mntx2c.png"></p>
<p>↑有输出但跳转到403页面</p>
<h3 id="PostFilter"><a href="#PostFilter" class="headerlink" title="@PostFilter"></a>@PostFilter</h3><p>不常用</p>
<p>对返回数据进行过滤</p>
<p><img src="https://files.catbox.moe/f4cqge.png"></p>
<h3 id="PreFilter"><a href="#PreFilter" class="headerlink" title="@PreFilter"></a>@PreFilter</h3><p>不常用</p>
<p>对传入方法的数据进行过滤</p>
<p><img src="https://files.catbox.moe/urcoyc.png"></p>
<h2 id="用户注销"><a href="#用户注销" class="headerlink" title="用户注销"></a>用户注销</h2><p>配置类中添加退出配置</p>
<p><code>http.logout().logoutUrl(&quot;/logout&quot;).logoutSuccessUrl(&quot;/index&quot;).permitAll()</code></p>
<p>退出超链接：</p>
<p><code>&lt;a href=&quot;/logout&quot;&gt;注销&lt;/a&gt;</code></p>
<h2 id="基于数据库实现自动登录"><a href="#基于数据库实现自动登录" class="headerlink" title="基于数据库实现自动登录"></a>基于数据库实现自动登录</h2><p>“自动登录”“十天内免登陆”….</p>
<ul>
<li>cookie技术</li>
<li>安全框架实现</li>
</ul>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="https://files.catbox.moe/ddagu1.png" alt="步骤"></p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ol>
<li>创建数据库 <code>JdbcTokenRepositoryImpl</code>中有建表sql语句</li>
<li>修改配置类：注入数据源，配置操作数据库对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span> <span class="function"><span class="keyword">public</span> PersistenTokenRepository <span class="title">persistenTokenRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">    JdbcTokenRepositoryImpl jdbcTokenRepository=<span class="keyword">new</span> JdbcTokenRepositoryImpl(); </span><br><span class="line">    jdbcTokenRepository.setDataSource(dataSource);</span><br><span class="line">   <span class="comment">// jdbcTokenRepository.setCreateTableOnStartup(true) 自动创建数据库表</span></span><br><span class="line">    <span class="keyword">return</span> jdbcTokenRepository;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.</p>
<p><img src="https://files.catbox.moe/z5yw7u.png" alt="第三步"></p>
<ol start="4">
<li>自动登录复选框</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkBox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;remeber-me&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>跨站请求伪造</p>
<p>form中加入以下语句</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">th:name</span>=<span class="string">&quot;$&#123;_csrf.parameterName&#125;$&quot;</span> <span class="attr">th:value</span>=<span class="string">&quot;$&#123;_csrf.token&#125;$&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/khqx95.png"></p>
<p><strong>csrfFilter.class</strong></p>
<h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><ul>
<li>微服务的每个模块都相当于一个单独的项目，代码量明显减少，遇到的问题也相对来说比较好解决</li>
<li>微服务的每个模块可以使用不同的存储方式(redis/mysql/etc）数据库也是每个模块对应自己的数据库</li>
<li>每个模块可以使用不同的开发技术、开发语言，开发模式更灵活</li>
</ul>
<p><img src="https://files.catbox.moe/4nbgiq.png"></p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><blockquote>
<p><img src="https://files.catbox.moe/83ktop.png"><br><img src="https://files.catbox.moe/v5k1fs.png"><br><img src="https://files.catbox.moe/bnkrpw.png"><br><img src="https://files.catbox.moe/may13u.png"><br><img src="https://files.catbox.moe/2jaj6f.png"><br><img src="https://files.catbox.moe/wm0w0b.png"><br><img src="https://files.catbox.moe/syca4w.png"><br><img src="https://files.catbox.moe/b3wcly.png"><br><img src="https://files.catbox.moe/k0l3rs.png"><br><img src="https://files.catbox.moe/kyvfra.png"></p>
</blockquote>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p><img src="https://files.catbox.moe/3c4wus.png"></p>
<h3 id="UsernamePasswordAuthenticationFilter"><a href="#UsernamePasswordAuthenticationFilter" class="headerlink" title="UsernamePasswordAuthenticationFilter"></a><code>UsernamePasswordAuthenticationFilter</code></h3><ul>
<li><p>查询Filter父类<code>AbstractAuthenticationProcessingFilter</code>的<code>doFilter()</code></p>
<ul>
<li>判断提交方式是否是post提交</li>
<li>调用子类的方法<code>attemptAuthentication(request,response)</code>进行身份验证<ul>
<li>认证信息存入<code>Authentication</code>对象中</li>
</ul>
</li>
<li>session策略处理</li>
<li>认证失败抛出异常，执行认证失败的方法<code>unsuccessfulAuthentication()</code><ul>
<li>认证成功执行认证成功的方法</li>
</ul>
</li>
</ul>
</li>
<li><p><code>attemptAuthentication(request,response)</code></p>
<ul>
<li>判断是否是post提交，不是则抛出异常</li>
<li>获取表单提交的数据</li>
<li>使用获取数据，构造成对象，标记成未认证状态，把请求中的一些属性信息设置到对象里，调用方法进行身份认证(userDetailsService)</li>
</ul>
</li>
<li><p><code>UsernamePasswordAuthencationToken</code>构建过程</p>
<p><img src="https://files.catbox.moe/klxjx8.png"></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2021/11/10/Docker/Docker/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker-学习过程"><a href="#Docker-学习过程" class="headerlink" title="Docker 学习过程"></a>Docker 学习过程</h2><ul>
<li>Docker概述</li>
<li>Docker安装</li>
<li>Docker命令<ul>
<li>镜像命令</li>
<li>容器命令</li>
<li>操作命令</li>
</ul>
</li>
<li>Docker镜像</li>
<li>容器数据卷</li>
<li>DockerFile</li>
<li>Docker网络原理</li>
<li>IDEA整合Docker</li>
</ul>
<p>以上完成“单机Docker”</p>
<ul>
<li>Docker Compose 集群</li>
<li>Docker Swarm 集群管理</li>
<li>CI \CD Jenkins 持续集成和持续部署</li>
</ul>
<span id="more"></span>

<h2 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h2><h3 id="Docker-为什么会出现"><a href="#Docker-为什么会出现" class="headerlink" title="Docker 为什么会出现"></a>Docker 为什么会出现</h3><p>开发与上线</p>
<p>开发与运维</p>
<p>版本更新 –&gt;服务不可用</p>
<p>==&gt;解决环境配置很麻烦的问题</p>
<p>–&gt;发布项目：jar包+环境一起打包</p>
<p>传统由开发完成jar，运维配置环境</p>
<p>现在由开发打包部署上线，直接完成环境配置 –镜像</p>
<p>仓库地址 <a href="https://hub.docker.com/]">https://hub.docker.com/</a></p>
<p>文档地址：<a href="https://docs.docker.com/">https://docs.docker.com/</a></p>
<h3 id="Docker应用场景"><a href="#Docker应用场景" class="headerlink" title="Docker应用场景"></a>Docker应用场景</h3><p><strong>容器化技术</strong></p>
<p>打包镜像发布测试，一键运行</p>
<p>更便捷的升级和扩缩容</p>
<p>更简单的系统运维：使开发测试环境高度一致</p>
<p>更高效的计算资源利用：Docker是内核级别的虚拟化，可以在一个物理机上运行更多的容器实例</p>
<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><p><img src="https://files.catbox.moe/v7tixw.png" alt="架构图"></p>
<p>名词解释：</p>
<p><img src="https://files.catbox.moe/k3gvyz.png"></p>
<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><ol>
<li>安装准备环境<ol>
<li><code>yum -y install 包名</code></li>
<li>gcc:<code>yum -y install gcc</code></li>
<li>gcc-c++<code>yum -y install gcc-c++</code></li>
<li>清除旧版本</li>
</ol>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y remove docker docker-common docker-selinux docker-engine</span><br><span class="line"></span><br><span class="line">yum remove</span><br><span class="line">docker \</span><br><span class="line">docker-client \</span><br><span class="line">docker-client-latest \</span><br><span class="line">docker-common \</span><br><span class="line">docker-latest \</span><br><span class="line">docker-latest-logrotate \</span><br><span class="line">docker-logrotate \</span><br><span class="line">docker-engine</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>安装yum-utils软件包<code>sudo yum install -y yum-utils</code></li>
<li>设置镜像仓库</li>
<li>```bash<br>sudo yum-config-manager <br>–add-repo <br><a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8. 更新yum软件包索引`yum makecache fast`</span><br><span class="line">9. 安装docker`sudo yum install docer-ce docker-ce-cli`</span><br><span class="line">10. 启动docker`sudo systemctl start docker`</span><br><span class="line">11. 使用`docker version`判断是否安装成功</span><br><span class="line">12. ![](https://ftp.bmp.ovh/imgs/2021/11/498b6c897ca92ddf.png)</span><br><span class="line">13. HelloWorld测试</span><br><span class="line">14. ![](https://ftp.bmp.ovh/imgs/2021/11/94df31373b1f0261.png)[官方文档](https://https://docs.docker.com/engine/install/centos/)</span><br><span class="line"></span><br><span class="line">#### 配置阿里云镜像加速</span><br><span class="line"></span><br><span class="line">![](https://ftp.bmp.ovh/imgs/2021/11/efca611a0c3db03d.png)</span><br><span class="line"></span><br><span class="line">![](https://ftp.bmp.ovh/imgs/2021/11/fa2e438b4a0065b1.png)</span><br><span class="line"></span><br><span class="line">### Docker</span><br><span class="line"></span><br><span class="line">![](https://ftp.bmp.ovh/imgs/2021/11/17b0e023f633dd89.png)</span><br><span class="line"></span><br><span class="line">![](https://files.catbox.moe/e17i4h.png)</span><br><span class="line"></span><br><span class="line">### 底层原理</span><br><span class="line"></span><br><span class="line">Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上，通过Socker从客户端访问！Docker Server接收到Docker-Client的指令，就会执行这个指令</span><br><span class="line"></span><br><span class="line">![](https://files.catbox.moe/54p3f3.png)</span><br><span class="line"></span><br><span class="line">#### Docker比VM快</span><br><span class="line"></span><br><span class="line">1. Docker比虚拟机更少的抽象层</span><br><span class="line">2. docker利用宿主机的内核，VM需要的是Guest OS</span><br><span class="line"></span><br><span class="line">![](https://files.catbox.moe/l3h8ho.png)</span><br><span class="line"></span><br><span class="line">Docker新建一个容器的时候，不需要像虚拟机一样重新加载一个操作系统内核，直接利用宿主机的操作系统，而虚拟机是需要加载Guest OS。</span><br><span class="line"></span><br><span class="line">![](https://files.catbox.moe/i13jf1.png)</span><br><span class="line"></span><br><span class="line">## Docker常用命令</span><br><span class="line"></span><br><span class="line">### 帮助命令</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">docker version          #查看docker的版本信息</span><br><span class="line">docker info             #查看docker的系统信息,包括镜像和容器的数量</span><br><span class="line">docker 命令 --help       #帮助命令(可查看可选的参数)</span><br><span class="line">docker COMMAND --help</span><br></pre></td></tr></table></figure></li>
</ol>
<p><a href="https://docs.docker.com/engine/reference/commandline/">帮助文档</a></p>
<h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h4 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h4><p><img src="https://files.catbox.moe/8oj949.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解释:</span></span><br><span class="line">1.REPOSITORY  镜像的仓库源</span><br><span class="line"></span><br><span class="line">2.TAG  镜像的标签</span><br><span class="line"></span><br><span class="line">3.IMAGE ID 镜像的id</span><br><span class="line"></span><br><span class="line">4.CREATED 镜像的创建时间</span><br><span class="line"></span><br><span class="line">5.SIZE 镜像的大小</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选参数</span></span><br><span class="line"></span><br><span class="line">-a/--all 列出所有镜像</span><br><span class="line"></span><br><span class="line">-q/--quiet 只显示镜像的id</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h4><p>搜索镜像<br><img src="https://files.catbox.moe/t0oeax.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可选参数 docker search --help</span></span><br><span class="line"></span><br><span class="line">Search the Docker Hub <span class="keyword">for</span> images</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print search using a Go template</span><br><span class="line">      --<span class="built_in">limit</span> int       Max number of search results (default 25)</span><br><span class="line">      --no-trunc        Don<span class="string">&#x27;t truncate output</span></span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/jirfvw.png"></p>
<h4 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h4><p>下载镜像</p>
<p><img src="https://files.catbox.moe/zsixdn.png"></p>
<p><img src="https://files.catbox.moe/3g37ot.png"><br>分层下载<br><img src="https://files.catbox.moe/tdh2nx.png"><br>重复的不会多次下载</p>
<h4 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h4><p>删除镜像</p>
<p><img src="https://files.catbox.moe/94wkmn.png"></p>
<p><img src="https://files.catbox.moe/x4b8ne.png"><br><code>docker rmi -f Id1 Id2 Id3</code></p>
<p><img src="image/%E5%AD%A6%E4%B9%A0/1636452664300.png"><br><code>docker rmi -f $(docker images -aq)</code>删除全部</p>
<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><p>有了镜像才能创建容器</p>
<p><code>docker pull centos</code></p>
<h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数说明</span></span><br><span class="line">--name=<span class="string">&quot;名字&quot;</span>           指定容器名字 tomcat01 tomcat02///</span><br><span class="line">-d                     后台方式运行</span><br><span class="line">-it                    使用交互方式运行,进入容器查看内容</span><br><span class="line">-p                     指定容器的端口</span><br><span class="line">(</span><br><span class="line">-p ip:主机端口:容器端口  配置主机端口映射到容器端口 常用</span><br><span class="line">-p 主机端口:容器端口  常用</span><br><span class="line">-p 容器端口</span><br><span class="line">)</span><br><span class="line">-P                     随机指定端口(大写的P)</span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.bmp.ovh/imgs/2021/11/4d0a881523402fa6.png"><br>启动并进入容器</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/0c8a5394aa45cbe5.png"><br>进入后主机名即镜像名（镜像ID）</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/556a18f4d902867d.png"><br>容器内即一个小型的主机</p>
<h4 id="查看所有运行的容器"><a href="#查看所有运行的容器" class="headerlink" title="查看所有运行的容器"></a>查看所有运行的容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#docker ps </span></span><br><span class="line">     <span class="comment"># 列出当前正在运行的容器</span></span><br><span class="line">-a   <span class="comment"># 列出所有容器的运行记录</span></span><br><span class="line">-n=? <span class="comment"># 显示最近创建的n个容器</span></span><br><span class="line">-q   <span class="comment"># 只显示容器的编号</span></span><br></pre></td></tr></table></figure>

<h4 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h4><p><code>exit</code> 直接停止并退出容器<br><code>ctrl + P + Q</code> 容器不停止，退出</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/b74ad162c7c7c168.png"></p>
<h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><p><code>docekr rm 容器id</code> 删除指定容器|不能删除正在运行的容器，强制删除用<code>rm -f</code><br><code>docker rm -f $(docker ps -aq)</code> 删除所有容器<br><code>docker ps -a -q|xargs docker rm</code> #管道删除所有容器</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/ffdf48c692317b61.png"></p>
<h4 id="启动和停止容器"><a href="#启动和停止容器" class="headerlink" title="启动和停止容器"></a>启动和停止容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start 容器id   <span class="comment"># 启动</span></span><br><span class="line">docker restart 容器id <span class="comment"># 重启</span></span><br><span class="line">docker stop 容器id    <span class="comment"># 停止</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器id    <span class="comment"># 强制停止</span></span><br></pre></td></tr></table></figure>

<p><img src="https://ftp.bmp.ovh/imgs/2021/11/d9bc972defdd2795.png"></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/d854315dc3e3baa8.png"></p>
<h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><h4 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h4><p><code>docker run -d 镜像名</code><br><img src="https://ftp.bmp.ovh/imgs/2021/11/45a5978b11ab9b80.png"><br><strong>docker容器后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止，因此使用<code>docker ps</code>查询发现centos停止了</strong></p>
<h4 id="查看日志命令"><a href="#查看日志命令" class="headerlink" title="查看日志命令"></a>查看日志命令</h4><p><code>docker logs</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs --<span class="built_in">help</span></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Fetch the logs of a container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow <span class="built_in">log</span> output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m <span class="keyword">for</span> 42 minutes)</span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs (default <span class="string">&quot;all&quot;</span>)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m <span class="keyword">for</span> 42 minutes)</span><br><span class="line"></span><br><span class="line">常用：</span><br><span class="line">docker logs -tf 容器id</span><br><span class="line">docker logs --tail number 容器id <span class="comment">#num为要显示的日志条数</span></span><br></pre></td></tr></table></figure>

<h4 id="查看容器中的进程信息"><a href="#查看容器中的进程信息" class="headerlink" title="查看容器中的进程信息"></a>查看容器中的进程信息</h4><p><code>top命令</code></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/e2af3703e05493c6.png"></p>
<h4 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h4><p><code>docker inspect 容器id</code></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/1bdcfbfdf1d09944.png"></p>
<h4 id="进入正在运行的容器"><a href="#进入正在运行的容器" class="headerlink" title="进入正在运行的容器"></a>进入正在运行的容器</h4><p><code>docker exec -it 容器id bashShell</code></p>
<p><img src="https://files.catbox.moe/j2w42g.png"><br>通过<code>exec</code>进入容器后打开一个新的终端，可以在里面操作</p>
<p><code>docker attach 容器id</code><br><img src="https://files.catbox.moe/2l8ygu.png"><br>通过<code>attach</code>进入的正在执行的代码，不会启动新的进程</p>
<h4 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h4><p><code>docker cp 容器id:容器内路径 目的的主机路径</code></p>
<p><img src="https://files.catbox.moe/evyhcl.png"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://files.catbox.moe/3fbstt.png"></p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="部署Niginx"><a href="#部署Niginx" class="headerlink" title="部署Niginx"></a>部署Niginx</h3><h3 id="部署Tomcat"><a href="#部署Tomcat" class="headerlink" title="部署Tomcat"></a>部署Tomcat</h3><p><code>docker run -it --rm tomcat:9.0</code></p>
<p><code>--rm 用于测试用完即删</code></p>
<p><img src="https://files.catbox.moe/gdzik6.png"></p>
<p><img src="https://files.catbox.moe/td12h0.png"></p>
<p>重新使用pull下载tomcat</p>
<p><img src="https://files.catbox.moe/ojlbcm.png"></p>
<p>后台运行</p>
<p><img src="https://files.catbox.moe/u8doik.png"></p>
<p>外网访问</p>
<p><img src="https://files.catbox.moe/4kiigi.png"></p>
<p>进入tomcat01查看</p>
<p><img src="https://files.catbox.moe/w7p7dz.png"></p>
<blockquote>
<p>可发现：Tomcat中命令不全，且webapps中为空</p>
<p>原因：阿里云镜像中，默认是最小的镜像，将所有不必要的东西都剔除掉了，从而保证最小的可运行环境</p>
</blockquote>
<p>解决：</p>
<p><img src="https://files.catbox.moe/7uif2u.png"></p>
<p>可以发现，ROOT等文件都放在了webapps.dist中，将其复制到webapps中去即可</p>
<p><code>cp -r webapps.dist/* webapps</code></p>
<p><img src="https://files.catbox.moe/zz255v.png"></p>
<h3 id="部署ES-Kibana"><a href="#部署ES-Kibana" class="headerlink" title="部署ES+Kibana"></a>部署ES+Kibana</h3><h2 id="Portainier可视化面版"><a href="#Portainier可视化面版" class="headerlink" title="Portainier可视化面版"></a>Portainier可视化面版</h2><p>更好的选择：Rancher（CI/CD用）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8088:9000\</span><br><span class="line"> --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span><br></pre></td></tr></table></figure>

<p>开通8088端口</p>
<p><img src="https://files.catbox.moe/w9cgrm.png"></p>
<h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><h3 id="什么是镜像"><a href="#什么是镜像" class="headerlink" title="什么是镜像"></a>什么是镜像</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需要的所有内容，包括代码，运行时（一个程序在运行或者在被执行的依赖）、库，环境变量和配置文件。</p>
<h3 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h3><p>Docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统是UnionFS联合文件系统。</p>
<p><img src="https://files.catbox.moe/ltq6dj.png"></p>
<h3 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h3><p><img src="https://files.catbox.moe/cx8ked.png"></p>
<p><code>docker inspect redis:latest</code></p>
<p><img src="https://files.catbox.moe/gibo7a.png"></p>
<p><img src="https://files.catbox.moe/el3o29.png"></p>
<p><img src="https://files.catbox.moe/4yvgkn.png"></p>
<blockquote>
<p>Docker镜像默认都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部</p>
<p>这一层就是我们通常说的容器，容器之下为镜像层</p>
</blockquote>
<h3 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit <span class="comment">#提交容器成为一个新的副本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#类似git</span></span><br><span class="line">docker commit -m=<span class="string">&quot;提交的描述信息&quot;</span> -a=<span class="string">&quot;作者&quot;</span> 容器id 目标镜像名:[版本]</span><br></pre></td></tr></table></figure>

<p><strong>测试</strong></p>
<p>docker的tomcat默认镜像中是没有webapps的，要想打开8080端口有实际网页，需要将webapps.dist里的文件拷贝到webapps里（见前tomcat部署）</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/95fc7bbb957b014e.png"></p>
<p>提交后的的镜像就是自行修改后的镜像</p>
<p>类似虚拟机的快照</p>
<h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><p>将Docker容器中MySQL的数据<del>存储</del>同步在本地，<strong>数据持久化</strong></p>
<p><strong>将容器内的目录挂载到Linux上</strong></p>
<p><strong>容器的持久化和同步操作，容器间的数据共享</strong></p>
<h3 id="使用数据卷"><a href="#使用数据卷" class="headerlink" title="使用数据卷"></a>使用数据卷</h3><h4 id="使用命令挂载"><a href="#使用命令挂载" class="headerlink" title="使用命令挂载"></a>使用命令挂载</h4><p>docker run -it -v 主机目录:容器内目录 镜像名 bashShell</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/b45f61babebe7579.png"></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/c789276f9a3493e2.png"></p>
<p>挂载<code>inspect</code></p>
<p><strong>Source与Destination之间为双向绑定</strong></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/360fd1feabb65dc4.png"></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/7638d7fa1c073fcf.png"></p>
<p>停止容器后，修改主机中的文件，容器内对应文件也会修改</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/5a5cd51c264ece10.png"></p>
<blockquote>
<p>应用：在修改如配置文件之类的文件时，只需要在本地修改即可，容器内可自动同步</p>
</blockquote>
<h4 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h4><p>问题：MySQL的数据持久化问题</p>
<p><strong>data目录</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 获取MySQL镜像</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器，挂载数据</span></span><br><span class="line"><span class="comment"># 安装启动mysql需要设置密码</span></span><br><span class="line"><span class="comment"># -d后台运行 -p端口映射</span></span><br><span class="line">docker run -d -p 3310:3306 -v /home/akatsugi/mysql/conf:/etc/mysql/conf.d -v /home/akatsugi/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>本地连接测试：</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/b0246867cc93ac2a.png"></p>
<p>本地文件</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/cce4181ae83eb5ce.png"></p>
<p><code>create database testDockerMysql</code>本地文件会同步更新</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/11/329dd270a7d50dbd.png"></p>
<p>删除容器后，本地文件并不会同步删除，<strong>以此实现容器的数据持久化功能</strong></p>
<p><img src="https://files.catbox.moe/tg1d18.png"></p>
<h4 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h4><p><code>docker volume命令</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi mysql]<span class="comment"># docker volume --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker volume COMMAND</span><br><span class="line"></span><br><span class="line">Manage volumes</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create      Create a volume</span><br><span class="line">  inspect     Display detailed information on one or more volumes</span><br><span class="line">  ls          List volumes</span><br><span class="line">  prune       Remove all unused <span class="built_in">local</span> volumes</span><br><span class="line">  rm          Remove one or more volumes</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;docker volume COMMAND --help&#x27;</span> <span class="keyword">for</span> more information on a <span class="built_in">command</span>.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>匿名挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi mysql]<span class="comment"># docker run -d -P --name centos01 -v /home/akatsugi/test centos</span></span><br><span class="line">1d5389e9df68bc24864f42e0796972881b3fbaccd8a83ded93fd0f20199fdd19</span><br><span class="line">[root@Akatsugi mysql]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line"><span class="built_in">local</span>     7ec078397ab1ac5f3fa6a81c57bc11442fff2d5cac3968a0894d1a125cd272b9</span><br><span class="line"><span class="built_in">local</span>     09d0712749b3c992f8b93f8860bf27604ccd33bf5315175e434097d0e0899150</span><br><span class="line"><span class="built_in">local</span>     85eec5e4494d26ef191071ac4901b97f2d916905e5cde9c280f334b96010947c</span><br><span class="line"><span class="built_in">local</span>     39062450a6a4eb89b797ac8e3cc80bf6cef0259a6a268af3fd096266bfd3779c</span><br><span class="line"><span class="built_in">local</span>     e888d2f38dced964541265d34b9edbe067870b092886ad93daa9f37492c5e88d</span><br><span class="line"><span class="built_in">local</span>     e17283d4352f92930397990e1156fac924dd1c45d6ffad1df4e4692bd60ec26c</span><br><span class="line"><span class="built_in">local</span>     f9118fba608d0ee38ba8fa2884f674faa3e8a7022a1ae22061a949bfab049ca0</span><br><span class="line"><span class="built_in">local</span>     ff5a2ec57243c959697442a29e931acba7309fc1ad89990161f7baf24d2e4b1a</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>具名挂载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi mysql]<span class="comment"># docker run -d -P --name centos02 -v centosTest:/home/akatsugi/test centos</span></span><br><span class="line">c1cddd3eccd1aebc3781651e4d5146702a436db7b931305478bae59e50f106cf</span><br><span class="line">[root@Akatsugi mysql]<span class="comment"># docker volume ls</span></span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">...</span><br><span class="line"><span class="built_in">local</span>     39062450a6a4eb89b797ac8e3cc80bf6cef0259a6a268af3fd096266bfd3779c</span><br><span class="line"><span class="built_in">local</span>     centosTest</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi mysql]<span class="comment"># docker volume inspect centosTest</span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;CreatedAt&quot;</span>: <span class="string">&quot;2021-11-12T20:38:54+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Mountpoint&quot;</span>: <span class="string">&quot;/www/server/docker/volumes/centosTest/_data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;centosTest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/ummrt4.png"></p>
<p>读写权限</p>
<p>通过 -v 容器内路径:ro rw 改变读写权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name centos02 -v centosTest:/home:ro centos</span><br><span class="line">docker run -d -P --name centos02 -v centosTest:/home:rw centos</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ro</strong> 标识的卷只能够通过宿主机来操作，不能在容器内部操作</li>
</ul>
<h4 id="DockerFile初步"><a href="#DockerFile初步" class="headerlink" title="DockerFile初步"></a>DockerFile初步</h4><p><strong>DockerFile就是用来构建docker镜像的构建文件，是一个命令脚本</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi _data]<span class="comment"># docker build --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker build [OPTIONS] PATH | URL | -</span><br><span class="line"></span><br><span class="line">Build an image from a Dockerfile</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --add-host list           Add a custom host-to-IP mapping (host:ip)</span><br><span class="line">      --build-arg list          Set build-time variables</span><br><span class="line">      --cache-from strings      Images to consider as cache sources</span><br><span class="line">      --cgroup-parent string    Optional parent cgroup <span class="keyword">for</span> the container</span><br><span class="line">      --compress                Compress the build context using gzip</span><br><span class="line">      --cpu-period int          Limit the CPU CFS (Completely Fair Scheduler) period</span><br><span class="line">      --cpu-quota int           Limit the CPU CFS (Completely Fair Scheduler) quota</span><br><span class="line">  -c, --cpu-shares int          CPU shares (relative weight)</span><br><span class="line">      --cpuset-cpus string      CPUs <span class="keyword">in</span> <span class="built_in">which</span> to allow execution (0-3, 0,1)</span><br><span class="line">      --cpuset-mems string      MEMs <span class="keyword">in</span> <span class="built_in">which</span> to allow execution (0-3, 0,1)</span><br><span class="line">      --disable-content-trust   Skip image verification (default <span class="literal">true</span>)</span><br><span class="line">  -f, --file string             Name of the Dockerfile (Default is <span class="string">&#x27;PATH/Dockerfile&#x27;</span>)</span><br><span class="line">      --force-rm                Always remove intermediate containers</span><br><span class="line">      --iidfile string          Write the image ID to the file</span><br><span class="line">      --isolation string        Container isolation technology</span><br><span class="line">      --label list              Set metadata <span class="keyword">for</span> an image</span><br><span class="line">  -m, --memory bytes            Memory <span class="built_in">limit</span></span><br><span class="line">      --memory-swap bytes       Swap <span class="built_in">limit</span> equal to memory plus swap: <span class="string">&#x27;-1&#x27;</span> to <span class="built_in">enable</span> unlimited swap</span><br><span class="line">      --network string          Set the networking mode <span class="keyword">for</span> the RUN instructions during build (default</span><br><span class="line">                                <span class="string">&quot;default&quot;</span>)</span><br><span class="line">      --no-cache                Do not use cache when building the image</span><br><span class="line">      --pull                    Always attempt to pull a newer version of the image</span><br><span class="line">  -q, --quiet                   Suppress the build output and <span class="built_in">print</span> image ID on success</span><br><span class="line">      --rm                      Remove intermediate containers after a successful build (default <span class="literal">true</span>)</span><br><span class="line">      --security-opt strings    Security options</span><br><span class="line">      --shm-size bytes          Size of /dev/shm</span><br><span class="line">  -t, --tag list                Name and optionally a tag <span class="keyword">in</span> the <span class="string">&#x27;name:tag&#x27;</span> format</span><br><span class="line">      --target string           Set the target build stage to build.</span><br><span class="line">      --<span class="built_in">ulimit</span> <span class="built_in">ulimit</span>           Ulimit options (default [])</span><br><span class="line"></span><br><span class="line"><span class="comment"># -f file 文件</span></span><br><span class="line"><span class="comment"># -t target 目标镜像目</span></span><br><span class="line"><span class="comment"># . 当前目录</span></span><br><span class="line">docker build -f dockerfile1 -t <span class="built_in">test</span>/centos .</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi docker-test-volume]<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED              STATUS                        PORTS     NAMES</span><br><span class="line">d430b6c4a7d1   <span class="built_in">test</span>/centos   <span class="string">&quot;/bin/bash&quot;</span>              39 seconds ago       Exited (0) 14 seconds ago               wizardly_carson</span><br><span class="line">[root@d430b6c4a7d1 /]<span class="comment"># cd volume01</span></span><br><span class="line">[root@d430b6c4a7d1 volume01]<span class="comment"># touch test.txt</span></span><br><span class="line">[root@d430b6c4a7d1 volume01]<span class="comment"># ls</span></span><br><span class="line">test.txt</span><br><span class="line">[root@d430b6c4a7d1 volume01]<span class="comment"># cd ..</span></span><br><span class="line">[root@d430b6c4a7d1 /]<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">[root@Akatsugi docker-test-volume]<span class="comment"># vim dockerfile1</span></span><br><span class="line">[root@Akatsugi docker-test-volume]<span class="comment"># cat dockerfile1 </span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;-----end-----&quot;</span></span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line">[root@Akatsugi docker-test-volume]<span class="comment"># docker build -f dockerfile1 -t test/centos .</span></span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"> ---&gt; 5d0da3dc9764</span><br><span class="line">Step 2/4 : VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> d296ad8e92de</span><br><span class="line">Removing intermediate container d296ad8e92de</span><br><span class="line"> ---&gt; 37670011901b</span><br><span class="line">Step 3/4 : CMD <span class="built_in">echo</span> <span class="string">&quot;-----end-----&quot;</span></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> eae40435b4f9</span><br><span class="line">Removing intermediate container eae40435b4f9</span><br><span class="line"> ---&gt; 1fad7821ff52</span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 5328c36df990</span><br><span class="line">Removing intermediate container 5328c36df990</span><br><span class="line"> ---&gt; 3a5fb77fa656</span><br><span class="line">Successfully built 3a5fb77fa656</span><br><span class="line">Successfully tagged <span class="built_in">test</span>/centos:latest</span><br><span class="line">[root@Akatsugi docker-test-volume]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line"><span class="built_in">test</span>/centos           latest    3a5fb77fa656   34 seconds ago   231MB</span><br><span class="line">[root@Akatsugi docker-test-volume]<span class="comment"># docker run -it test/centos /bin/bash</span></span><br><span class="line">[root@33096ed08d33 /]<span class="comment"># ls</span></span><br><span class="line">bin  etc   lib	  lost+found  mnt  proc  run   srv  tmp  var	   volume02</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr  volume01</span><br><span class="line">^PQ</span><br><span class="line">[root@Akatsugi docker-test-volume]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE         COMMAND       CREATED         STATUS              PORTS     NAMES</span><br><span class="line">d430b6c4a7d1   <span class="built_in">test</span>/centos   <span class="string">&quot;/bin/bash&quot;</span>   2 minutes ago   Up About a minute             wizardly_carson</span><br><span class="line">[root@Akatsugi docker-test-volume]<span class="comment"># docker inspect d430b6c4a7d1</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;Mounts&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;f06e0ee646635f1237758817a917702a81207961855c35a14de6077590480efd&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/www/server/docker/volumes/f06e0ee646635f1237758817a917702a81207961855c35a14de6077590480efd/_data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;volume01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;volume&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;458bdc74f166a5064fe9c5583b8a038c78e523b1b3bdf413584f1e39491975ee&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Source&quot;</span>: <span class="string">&quot;/www/server/docker/volumes/458bdc74f166a5064fe9c5583b8a038c78e523b1b3bdf413584f1e39491975ee/_data&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Destination&quot;</span>: <span class="string">&quot;volume02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Mode&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;RW&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;Propagation&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">...</span><br><span class="line">[root@Akatsugi volumes]<span class="comment"># cd /www/server/docker/volumes/f06e0ee646635f1237758817a917702a81207961855c35a14de6077590480efd/_data</span></span><br><span class="line">[root@Akatsugi _data]<span class="comment"># ls</span></span><br><span class="line">test.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以centos为基础</span></span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载卷 匿名挂载</span></span><br><span class="line">VOLUME [<span class="string">&quot;volume01&quot;</span>,<span class="string">&quot;volume02&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;-----end-----&quot;</span></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure>

<h4 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h4><p>多个MySQL之间同步容器</p>
<p><img src="https://files.catbox.moe/3jndb4.png"></p>
<p>创建容器docker01</p>
<p><img src="https://files.catbox.moe/zk91lf.png"></p>
<p>创建容器docker02</p>
<p><code>--volumes-from</code>继承数据卷</p>
<p><code>[root@Akatsugi akatsugi]# docker run -it --name docker02 --volumes-from docker01 test/centos</code></p>
<p>在docker01的数据卷中创建一个文件</p>
<p><img src="https://files.catbox.moe/x8zjb9.png"></p>
<p>在docker02中可以发现文件得到了同步</p>
<p><img src="https://files.catbox.moe/x5ax6m.png"></p>
<p>创建一个docker03，并在其中touch一个docker03，发现在docker01,02中都可以同步数据</p>
<p><img src="https://files.catbox.moe/mmzqbz.png"></p>
<p><strong>删除docker01和docker02后，docker03中的数据依旧在</strong></p>
<p><img src="https://files.catbox.moe/odvw5v.png"></p>
<h5 id="多个MySQL"><a href="#多个MySQL" class="headerlink" title="多个MySQL"></a>多个MySQL</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi /]<span class="comment"># docker run -d -p 3310:3306 -v /etc/mysql/conf.d -v /var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span></span><br><span class="line"></span><br><span class="line">[root@Akatsugi /]<span class="comment"># docker run -d -p 3311:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:5.7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><h3 id="DockerFile介绍"><a href="#DockerFile介绍" class="headerlink" title="DockerFile介绍"></a>DockerFile介绍</h3><p>用于构建docker镜像的文件，命令参数脚本</p>
<p>步骤:</p>
<ol>
<li>编写dockerfile文件</li>
<li><code>docker build</code>构建为镜像</li>
<li><code>docker run </code>运行镜像</li>
<li><code>docker push</code> 发布镜像(发布到DockerHub或阿里云镜像仓库)</li>
</ol>
<p>centos</p>
<p><img src="https://files.catbox.moe/vo769w.png"></p>
<p><img src="https://files.catbox.moe/zlhy9l.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM scratch  <span class="comment"># 一个最基础的镜像</span></span><br><span class="line">ADD centos-7-x86_64-docker.tar.xz / <span class="comment"># 添加了一个centos7</span></span><br><span class="line"></span><br><span class="line">LABEL \ <span class="comment"># centos的基本标签</span></span><br><span class="line">    org.label-schema.schema-version=<span class="string">&quot;1.0&quot;</span> \</span><br><span class="line">    org.label-schema.name=<span class="string">&quot;CentOS Base Image&quot;</span> \</span><br><span class="line">    org.label-schema.vendor=<span class="string">&quot;CentOS&quot;</span> \</span><br><span class="line">    org.label-schema.license=<span class="string">&quot;GPLv2&quot;</span> \</span><br><span class="line">    org.label-schema.build-date=<span class="string">&quot;20201113&quot;</span> \</span><br><span class="line">    org.opencontainers.image.title=<span class="string">&quot;CentOS Base Image&quot;</span> \</span><br><span class="line">    org.opencontainers.image.vendor=<span class="string">&quot;CentOS&quot;</span> \</span><br><span class="line">    org.opencontainers.image.licenses=<span class="string">&quot;GPL-2.0-only&quot;</span> \</span><br><span class="line">    org.opencontainers.image.created=<span class="string">&quot;2020-11-13 00:00:00+00:00&quot;</span></span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;/bin/bash&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><strong>很多官方镜像都是基础包，很多功能没有，我们通常会自己搭建自己的镜像</strong></p>
<h3 id="DockerFile的构建过程"><a href="#DockerFile的构建过程" class="headerlink" title="DockerFile的构建过程"></a>DockerFile的构建过程</h3><h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><ol>
<li>每个保留关键字（指令）都必须是大写字母</li>
<li>执行从上到下执行</li>
<li># 表示注释</li>
<li>每个指令都会创建提交一个新的镜像层，并提交</li>
</ol>
<p><img src="https://files.catbox.moe/uqyjug.png"></p>
<p><strong>dockerfile是面向开发的，以后如果要发布项目，做镜像，就需要编写dockerfile文件</strong></p>
<p>docker镜像已经逐渐成为企业交付的标准</p>
<ul>
<li>DockerFile: 构建文件，定义了一切的步骤，源代码</li>
<li>DockerImages：通过DockerFile生成的镜像，最终发布和运行的产品</li>
<li>Docker容器：镜像运行起来提供服务</li>
</ul>
<h3 id="DockerFile指令"><a href="#DockerFile指令" class="headerlink" title="DockerFile指令"></a>DockerFile指令</h3><p><img src="https://files.catbox.moe/3zw5kn.png"></p>
<table>
<thead>
<tr>
<th align="center">指令</th>
<th align="center">用法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">FROM</td>
<td align="center">基础镜像，一切都是从这里开始构建</td>
</tr>
<tr>
<td align="center">MAINTAINER</td>
<td align="center">镜像作者，一般姓名+邮箱</td>
</tr>
<tr>
<td align="center">RUN</td>
<td align="center">镜像构建的时候需要运行的命令</td>
</tr>
<tr>
<td align="center">ADD</td>
<td align="center">步骤：tomcat镜像，这个tomcat压缩包，添加内容</td>
</tr>
<tr>
<td align="center">WORKDIR</td>
<td align="center">镜像的工作目录</td>
</tr>
<tr>
<td align="center">VOLUME</td>
<td align="center">挂载的目录</td>
</tr>
<tr>
<td align="center">EXPOSE</td>
<td align="center">保留端口配置</td>
</tr>
<tr>
<td align="center">CMD</td>
<td align="center">指定容器启动的时候要运行的命令，只有最后一个会生效，可被替代</td>
</tr>
<tr>
<td align="center">ENTRYPOINT</td>
<td align="center">指定容器启动的时候要执行的命令，可以追加命令</td>
</tr>
<tr>
<td align="center">ONBUILD</td>
<td align="center">当构建一个被继承DockerFile这个时候才会运行ONBUILD命令</td>
</tr>
<tr>
<td align="center">COPY</td>
<td align="center">类似ADD命令，将文件拷贝到镜像中</td>
</tr>
<tr>
<td align="center">ENV</td>
<td align="center">构建时设置环境变量</td>
</tr>
</tbody></table>
<blockquote>
<p>解释：CMD与ENTRYPOINT：若dockerfile中本身有CMD ls -a或ENTRYPOINT ls -a时，<br>若执行docker run -l ,则对于CMD实际只执行 -l,对于ENTRYPOINT会执行ls -a -l</p>
</blockquote>
<h3 id="实战测试centos"><a href="#实战测试centos" class="headerlink" title="实战测试centos"></a>实战测试centos</h3><p><strong>DockerHub中大部分镜像都是从scratch这个基础镜像开始的，<code>FROM scratch</code></strong></p>
<p><strong>然后配置需要的软件和配置来进行构建</strong></p>
<p><img src="https://files.catbox.moe/zlhy9l.png"></p>
<p>创建一个自己的centos</p>
<p><img src="https://files.catbox.moe/00fl7v.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi dockerFile]<span class="comment"># docker run -it mycentos:0.1</span></span><br><span class="line"><span class="comment">## 编写DockerFile文件</span></span><br><span class="line">[root@Akatsugi dockerFile]<span class="comment"># vim mydockerfile</span></span><br><span class="line">[root@Akatsugi dockerFile]<span class="comment"># cat mydockerfile </span></span><br><span class="line">FROM centos    <span class="comment">#基于centos</span></span><br><span class="line">MAINTAINER akatsugi&lt;akatsugi@qq.com&gt; <span class="comment"># 作者</span></span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span>                <span class="comment"># 设置一个路径  </span></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span>                      <span class="comment"># 设置工作路径</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install vim               <span class="comment"># 按照vim等</span></span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80                            <span class="comment"># 暴露80端口</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;-----end------&quot;</span></span><br><span class="line">CMD /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建</span></span><br><span class="line">[root@Akatsugi dockerFile]<span class="comment"># docker build -f mydockerfile -t mycentos:0.1 .</span></span><br><span class="line"><span class="comment"># 测试运行</span></span><br><span class="line">[root@Akatsugi dockerFile]<span class="comment"># docker run -it mycentos:0.1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/vsjacw.png"></p>
<p>测试：docker images可以找到相应的镜像</p>
<p>运行后直接到设定的工作目录中，<code>ifconfig</code>和<code>vim</code>都能正常使用了</p>
<p><img src="https://files.catbox.moe/qbo19g.png"></p>
<h3 id="docker-history"><a href="#docker-history" class="headerlink" title="docker history"></a>docker history</h3><p>查看镜像的修改历史</p>
<p><img src="https://files.catbox.moe/h4edp2.png"></p>
<h3 id="CMD和ENTRYPOINT的区别"><a href="#CMD和ENTRYPOINT的区别" class="headerlink" title="CMD和ENTRYPOINT的区别"></a>CMD和ENTRYPOINT的区别</h3><p><strong>CMD</strong></p>
<p><img src="https://files.catbox.moe/l7dvx0.png">、</p>
<p>构建并运行：成功执行ls -a<img src="https://files.catbox.moe/v4i0hh.png"></p>
<p>添加”-l”后执行，ls -a失效，只剩下l</p>
<p><img src="https://files.catbox.moe/mwd52s.png"></p>
<p><strong>ENTRYPOINT</strong></p>
<p>同样的操作，entrypoint时，运行镜像添加命令参数，原指令可以执行</p>
<p><img src="https://files.catbox.moe/xsklrj.png"></p>
<h3 id="实战测试tomcat"><a href="#实战测试tomcat" class="headerlink" title="实战测试tomcat"></a>实战测试tomcat</h3><ul>
<li>准备tomcat压缩包，jdk压缩包</li>
</ul>
<p><img src="https://files.catbox.moe/o41opn.png"></p>
<ul>
<li>编写dockerfile文件，官方命名为<code>Dockerfile</code>,build会自动寻找此文件，就不需要再-f来指定了</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">MAINTAINER akatsugi&lt;akatsugi@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/<span class="built_in">local</span>/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u202-linux-x64.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line">ADD apache-tomcat-9.0.54.tar.gz /usr/<span class="built_in">local</span>/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/<span class="built_in">local</span></span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk1.8.0_202</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/<span class="built_in">local</span>/apache-tomcat-9.0.54</span><br><span class="line">ENV CATALINA_BASE /usr/<span class="built_in">local</span>/apache-tomcat-9.0.54</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/<span class="built_in">local</span>/apache-tomcat-9.0.54/bin/startup.sh &amp;&amp; tail -F /url/<span class="built_in">local</span>/apache-tomcat-9.0.54/bin/logs/catalina.out</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>构建镜像</li>
</ul>
<p><code>docker build -t mytomcat .</code></p>
<ul>
<li>运行镜像</li>
</ul>
<p>挂载了日志文件和webapps/test文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi tomcat]<span class="comment"># docker run -d -p 3355:8080 --name atomcat -v /home/akatsugi/tomcat/test:/usr/local/apache-tomcat-9.0.54/webapps/test -v /home/akatsugi/tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.54/logs mytomcat</span></span><br></pre></td></tr></table></figure>

<ul>
<li>访问测试</li>
</ul>
<p>localhost:3355  ip:3355</p>
<ul>
<li>发布项目<ul>
<li>进行卷挂载，使可以在本地编写项目发布</li>
<li>本地test文件夹下编写web.xml和index.jsp</li>
<li>访问ip:3355/test</li>
<li>查看本地tomcatLogs下的Catalina.out可查看日志</li>
</ul>
</li>
</ul>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>index.jsp</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">    pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;tomcatTest&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello DockerTomcat!&lt;br/&gt;</span><br><span class="line">&lt;%</span><br><span class="line">System.out.println(<span class="string">&quot;------my test web logs----&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/qhq4t4.png"></p>
<p><img src="https://files.catbox.moe/0l4fas.png"></p>
<h3 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h3><h4 id="发布到DockerHub"><a href="#发布到DockerHub" class="headerlink" title="发布到DockerHub"></a>发布到DockerHub</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi tomcat]<span class="comment"># docker login --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log <span class="keyword">in</span> to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>注册DockerHub账号</li>
</ul>
<p><img src="https://files.catbox.moe/xo6fta.png"></p>
<ul>
<li>修改镜像的tag：<code>docker tag 镜像id 你的账户名/镜像仓库名:tag名</code></li>
<li>提交：<code>docker push 你的账户名/镜像仓库名:tag名</code></li>
</ul>
<p><img src="https://files.catbox.moe/ffl4pd.png"></p>
<h4 id="发布到阿里云镜像服务"><a href="#发布到阿里云镜像服务" class="headerlink" title="发布到阿里云镜像服务"></a>发布到阿里云镜像服务</h4><ul>
<li>登录阿里云-容器镜像服务</li>
<li>创建命名空间</li>
<li>创建镜像仓库（本地）</li>
</ul>
<p><img src="https://files.catbox.moe/jc61pb.png"></p>
<ul>
<li>操作</li>
</ul>
<p><img src="https://files.catbox.moe/5u73yl.png"></p>
<p><img src="https://files.catbox.moe/5tfa0f.png"></p>
<p><img src="https://files.catbox.moe/brk5lw.png"></p>
<h2 id="Docker-流程"><a href="#Docker-流程" class="headerlink" title="Docker 流程"></a>Docker 流程</h2><p><img src="https://files.catbox.moe/fw9our.png"></p>
<p>save/load:将镜像打包成tar压缩包，以发送给别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi tomcat]<span class="comment"># docker save --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line"></span><br><span class="line">Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -o, --output string   Write to a file, instead of STDOUT</span><br><span class="line"></span><br><span class="line">[root@Akatsugi tomcat]<span class="comment"># docker load --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker load [OPTIONS]</span><br><span class="line"></span><br><span class="line">Load an image from a tar archive or STDIN</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -i, --input string   Read from tar archive file, instead of STDIN</span><br><span class="line">  -q, --quiet          Suppress the load output</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Docker网络（容器编排，集群部署，流水线）"><a href="#Docker网络（容器编排，集群部署，流水线）" class="headerlink" title="Docker网络（容器编排，集群部署，流水线）"></a>Docker网络（容器编排，集群部署，流水线）</h2><h3 id="Docker0"><a href="#Docker0" class="headerlink" title="Docker0"></a>Docker0</h3><p>（先清空所有镜像</p>
<p><code>ip addr</code></p>
<p>查询得有3个网卡</p>
<p><img src="https://files.catbox.moe/sm98nz.png"></p>
<p>运行docker tomcat镜像，查看ip，有两个网卡</p>
<p><img src="https://files.catbox.moe/qdgqd0.png"></p>
<p>使用本机(linux)可以ping到容器内部</p>
<p><img src="https://files.catbox.moe/5c9pwg.png"></p>
<p>—-&gt;<strong>Linux可以ping通docker容器内部</strong></p>
<ol>
<li>每启动一个docker容器，docker就会给容器分配一个ip，只要安装了docker，电脑就会有一个网卡docker0(桥接模式)，使用了evth-pair技术<ol>
<li>本机在ip addr得到以下</li>
</ol>
</li>
</ol>
<p><img src="https://files.catbox.moe/9pk4i1.png"></p>
<p>启动一个新的容器,可以发现主机又多了一对网卡（100，101为一对）</p>
<p><img src="https://files.catbox.moe/k8rqro.png"></p>
<ol start="2">
<li><p>evth-pair 就是要一对的虚拟设备接口，他们都是成对出现的，一端连接协议，一端彼此相连</p>
<ol>
<li>evth-pair就充当一个桥梁，连接各种虚拟设备</li>
<li>OpenStack，Docker容器之间的连接，都说使用evth-pair技术</li>
</ol>
</li>
<li><p>容器之间互ping，能ping通</p>
</li>
</ol>
<p><img src="https://files.catbox.moe/0rs05r.png"></p>
<p><img src="https://files.catbox.moe/3kps4i.png"></p>
<p><strong>所有容器不指定网络的情况下都说docker0路由的，docker会给容器分配一个默认的可用IP</strong></p>
<p>Docker中的所有网络接口都说虚拟的（虚拟的转发效率高</p>
<h3 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@f77ae4ee2395:/usr/<span class="built_in">local</span>/tomcat<span class="comment"># ping tomcat01</span></span><br><span class="line">ping: tomcat01: Name or service not known</span><br></pre></td></tr></table></figure>

<p>使能ping通</p>
<p><img src="https://files.catbox.moe/smo4rv.png"></p>
<p>反向ping不通</p>
<p><img src="https://files.catbox.moe/ry4i97.png"></p>
<h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><p>查看所有docker网络</p>
<p><code>docker network ls</code></p>
<p><img src="https://files.catbox.moe/rplvxt.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi ~]<span class="comment"># docker network --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line"></span><br><span class="line">Manage networks</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run <span class="string">&#x27;docker network COMMAND --help&#x27;</span> <span class="keyword">for</span> more information on a <span class="built_in">command</span>.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h4><p>bridge:桥接（默认）</p>
<p>host:和宿主机共享网络</p>
<p>none:不配置网络</p>
<p>container：容器网络连通（让容器之间直接互联，局限大，用得少）</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line">默认即为桥接模式</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建网络</span></span><br><span class="line"> docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">docker network ls</span><br><span class="line">docker network inspect mynet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -d -P --name tomcat01 --net mynet tomcat</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>同一自定义网络下的两个容器可以不用–link就使用容器名来ping通</strong></p>
</blockquote>
<h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><p><img src="https://files.catbox.moe/1lns26.png"></p>
<p>显然不行，因此需要使tomcat-02连通Mynet,从而ping通tomcat-net-01</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi ~]<span class="comment"># docker network connect --help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker network connect [OPTIONS] NETWORK CONTAINER</span><br><span class="line"></span><br><span class="line">Connect a container to a network</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --<span class="built_in">alias</span> strings           Add network-scoped <span class="built_in">alias</span> <span class="keyword">for</span> the container</span><br><span class="line">      --driver-opt strings      driver options <span class="keyword">for</span> the network</span><br><span class="line">      --ip string               IPv4 address (e.g., 172.30.100.104)</span><br><span class="line">      --ip6 string              IPv6 address (e.g., 2001:db8::33)</span><br><span class="line">      --link list               Add link to another container</span><br><span class="line">      --link-local-ip strings   Add a link-local address <span class="keyword">for</span> the container</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network connect mynet tomcat-01</span><br><span class="line"><span class="comment"># 连通之后</span></span><br><span class="line">docker network inspect mynet</span><br><span class="line"><span class="comment"># 发现实际是把tomcat-01放到了mynet网络下，即一个容器有了两个ip</span></span><br></pre></td></tr></table></figure>

<h3 id="实战-Redis集群部署"><a href="#实战-Redis集群部署" class="headerlink" title="实战 Redis集群部署"></a>实战 Redis集群部署</h3><p><img src="https://files.catbox.moe/il1tho.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络</span></span><br><span class="line">[root@Akatsugi ~]<span class="comment"># docker network create redis --subnet 172.38.0.0/16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建6个redis配置</span></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> $(seq 1 6); \</span><br><span class="line"><span class="keyword">do</span> \</span><br><span class="line">mkdir -p /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf</span><br><span class="line">touch /mydata/redis/node-<span class="variable">$&#123;port&#125;</span>/conf/redis.conf</span><br><span class="line">cat &lt;&lt; <span class="string">EOF &gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">bind 0.0.0.0</span></span><br><span class="line"><span class="string">Cluster-enabled yes</span></span><br><span class="line"><span class="string">Cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">Cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">Cluster-announce-ip 172.38.0.1$&#123;port&#125;</span></span><br><span class="line"><span class="string">Cluster-announce-port 6379</span></span><br><span class="line"><span class="string">Cluster-announce-bus-port 16379</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -p 6371:6379 -p 16371:16379 --name redis-1 \</span><br><span class="line">-v /mydata/redis/node-1/data:/data \</span><br><span class="line">-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.11 redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6372:6379 -p 16372:16379 --name redis-2 \</span><br><span class="line">-v /mydata/redis/node-2/data:/data \</span><br><span class="line">-v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.12 redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6373:6379 -p 16373:16379 --name redis-3 \</span><br><span class="line">-v /mydata/redis/node-3/data:/data \</span><br><span class="line">-v /mydata/redis/node-3/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.13 redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6374:6379 -p 16374:16379 --name redis-4 \</span><br><span class="line">-v /mydata/redis/node-4/data:/data \</span><br><span class="line">-v /mydata/redis/node-4/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.14 redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6375:6379 -p 16375:16379 --name redis-5 \</span><br><span class="line">-v /mydata/redis/node-5/data:/data \</span><br><span class="line">-v /mydata/redis/node-5/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.15 redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6376:6379 -p 16376:16379 --name redis-6 \</span><br><span class="line">-v /mydata/redis/node-6/data:/data \</span><br><span class="line">-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.16 redis redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入redis-1</span></span><br><span class="line">docker run -it redis-1 /bin/sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集群</span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 172.38.0.15:6379 to 172.38.0.11:6379</span><br><span class="line">Adding replica 172.38.0.16:6379 to 172.38.0.12:6379</span><br><span class="line">Adding replica 172.38.0.14:6379 to 172.38.0.13:6379</span><br><span class="line">M: 5afdf284a13a04ea023fb3c7a464994a1d5595bb 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: b85b56c965dc459411d3ef38b65fae4912d859e8 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: 9e7997dbdb938f3344657a4673e01d4bb90aaf7c 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 19433ea8c90083d00e82ef0152ce9257d5f550ad 172.38.0.14:6379</span><br><span class="line">   replicates 9e7997dbdb938f3344657a4673e01d4bb90aaf7c</span><br><span class="line">S: 1ee5cd151ec8c2f198a53ea7d5c3ffeb79556c7f 172.38.0.15:6379</span><br><span class="line">   replicates 5afdf284a13a04ea023fb3c7a464994a1d5595bb</span><br><span class="line">S: 191d6f85e19c5d0552e7f9f5e0e49fc0922f0717 172.38.0.16:6379</span><br><span class="line">   replicates b85b56c965dc459411d3ef38b65fae4912d859e8</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to join</span><br><span class="line">.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 172.38.0.11:6379)</span><br><span class="line">M: 5afdf284a13a04ea023fb3c7a464994a1d5595bb 172.38.0.11:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 1ee5cd151ec8c2f198a53ea7d5c3ffeb79556c7f 172.38.0.15:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 5afdf284a13a04ea023fb3c7a464994a1d5595bb</span><br><span class="line">S: 191d6f85e19c5d0552e7f9f5e0e49fc0922f0717 172.38.0.16:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates b85b56c965dc459411d3ef38b65fae4912d859e8</span><br><span class="line">M: b85b56c965dc459411d3ef38b65fae4912d859e8 172.38.0.12:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 19433ea8c90083d00e82ef0152ce9257d5f550ad 172.38.0.14:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 9e7997dbdb938f3344657a4673e01d4bb90aaf7c</span><br><span class="line">M: 9e7997dbdb938f3344657a4673e01d4bb90aaf7c 172.38.0.13:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/mnnt7t.png"></p>
<p>redis集群</p>
<p><img src="https://files.catbox.moe/x2dqwj.png"></p>
<p>stop掉redis-3</p>
<p><img src="https://files.catbox.moe/mepszt.png"></p>
<h3 id="SpringBoot微服务打包Docker镜像"><a href="#SpringBoot微服务打包Docker镜像" class="headerlink" title="SpringBoot微服务打包Docker镜像"></a>SpringBoot微服务打包Docker镜像</h3><ul>
<li>编写SpringBoot微服务</li>
<li>package成jar</li>
<li>IDEA按照docker插件</li>
<li>编写Dockerfile</li>
<li>将jar包和dockerfile传到服务器</li>
<li>服务器使用<code>docker build</code>构建镜像</li>
<li>运行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line">FROM java:8</span><br><span class="line"></span><br><span class="line">COPY *.jar /app.jar</span><br><span class="line"></span><br><span class="line">CMD [<span class="string">&quot;--server.port=8080&quot;</span>]</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/pqhgqx.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Akatsugi idea]<span class="comment"># docker build -t demo .</span></span><br><span class="line">Sending build context to Docker daemon  17.49MB</span><br><span class="line">Step 1/5 : FROM java:8</span><br><span class="line">8: Pulling from library/java</span><br><span class="line">5040bd298390: Pull complete </span><br><span class="line">fce5728aad85: Pull complete </span><br><span class="line">76610ec20bf5: Pull complete </span><br><span class="line">60170fec2151: Pull complete </span><br><span class="line">e98f73de8f0d: Pull complete </span><br><span class="line">11f7af24ed9c: Pull complete </span><br><span class="line">49e2d6393f32: Pull complete </span><br><span class="line">bb9cdec9c7f3: Pull complete </span><br><span class="line">Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9d</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> java:8</span><br><span class="line"> ---&gt; d23bdf5b1b1b</span><br><span class="line">Step 2/5 : COPY *.jar /app.jar</span><br><span class="line"> ---&gt; 6e2d65f0fe28</span><br><span class="line">Step 3/5 : CMD [<span class="string">&quot;--server.port=8080&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> b68a5ffa8d3e</span><br><span class="line">Removing intermediate container b68a5ffa8d3e</span><br><span class="line"> ---&gt; d72768fef782</span><br><span class="line">Step 4/5 : EXPOSE 8080</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 7c39d69f0f59</span><br><span class="line">Removing intermediate container 7c39d69f0f59</span><br><span class="line"> ---&gt; 14773ba2e7c6</span><br><span class="line">Step 5/5 : ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> c8536147c226</span><br><span class="line">Removing intermediate container c8536147c226</span><br><span class="line"> ---&gt; ce5731399e40</span><br><span class="line">Successfully built ce5731399e40</span><br><span class="line">Successfully tagged demo:latest</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">[root@Akatsugi idea]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">demo         latest    ce5731399e40   6 seconds ago   661MB</span><br><span class="line">tomcat       latest    b0e0b0a92cf9   3 weeks ago     680MB</span><br><span class="line">redis        latest    7faaec683238   5 weeks ago     113MB</span><br><span class="line">java         8         d23bdf5b1b1b   4 years ago     643MB</span><br><span class="line">[root@Akatsugi idea]<span class="comment"># docker run -d -P --name demo01 demo</span></span><br><span class="line">4eed7271bb5f7fd9f3d9310f0a22d07c106ccae3af3d26cf1a7c4b6224529922</span><br><span class="line">[root@Akatsugi idea]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                         NAMES</span><br><span class="line">4eed7271bb5f   demo      <span class="string">&quot;java -jar /app.jar …&quot;</span>   17 seconds ago   Up 15 seconds   0.0.0.0:49160-&gt;8080/tcp, :::49160-&gt;8080/tcp   demo01</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">[root@Akatsugi idea]<span class="comment"># curl localhost:49160</span></span><br><span class="line">&#123;<span class="string">&quot;timestamp&quot;</span>:<span class="string">&quot;2021-11-16T10:12:14.658+00:00&quot;</span>,<span class="string">&quot;status&quot;</span>:404,<span class="string">&quot;error&quot;</span>:<span class="string">&quot;Not Found&quot;</span>,<span class="string">&quot;path&quot;</span>:<span class="string">&quot;/&quot;</span>&#125;</span><br><span class="line">[root@Akatsugi idea]<span class="comment"># curl localhost:49160/hello</span></span><br><span class="line">hello,springboot[root@Akatsugi idea]<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo</title>
    <url>/2021/08/16/Dubbo/dubbo/</url>
    <content><![CDATA[<h1 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h1><h2 id="设计架构"><a href="#设计架构" class="headerlink" title="设计架构"></a>设计架构</h2><p><img src="https://files.catbox.moe/mnthc8.png" alt="设计架构"></p>
<p>基本流程：</p>
<ol>
<li>Container 启动服务</li>
<li>Provider将服务注册到注册中心zk中去</li>
<li>Consumer向注册中心订阅服务</li>
<li>Registry向消费者返回响应服务的Provider</li>
<li>Consumer向服务提供者调用服务，二者间建立联系，自此可以不再需要Zk</li>
<li>Monitor实时监控连接情况、点击次数（没有Monitor也不影响运行）<span id="more"></span>
<h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2></li>
</ol>
<p>Zookeeper</p>
<h2 id="Dubbo-admin"><a href="#Dubbo-admin" class="headerlink" title="Dubbo-admin"></a>Dubbo-admin</h2><p><img src="https://files.catbox.moe/j3j4ga.png" alt="dubbo-admin"></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="公共接口"><a href="#公共接口" class="headerlink" title="公共接口"></a>公共接口</h3><p><img src="https://files.catbox.moe/wrqqt0.png" alt="公共接口"></p>
<p>提供接口定义和bean类定义实现</p>
<p>导入dubbo</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="服务器提供者"><a href="#服务器提供者" class="headerlink" title="服务器提供者"></a>服务器提供者</h3><p><img src="https://files.catbox.moe/br2gnf.png" alt="Provider"></p>
<p>提供服务接口的实现</p>
<p>导入公共接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dubbo.gmall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gmall-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p><img src="https://files.catbox.moe/8jycn2.png" alt="Consumer"></p>
<p>提供消费者接口的实现</p>
<p>导入公共接口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dubbo.gmall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gmall-interface<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="消费者远程调用提供者的服务"><a href="#消费者远程调用提供者的服务" class="headerlink" title="消费者远程调用提供者的服务"></a>消费者远程调用提供者的服务</h2><p>步骤：</p>
<ol>
<li>服务提供者注册到注册中心//暴露服务<ol>
<li>pom.xml 引入dubbo依赖、引入ZooKeeper客户端</li>
<li>配置服务提供者provider.xml （spring xml）</li>
</ol>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:dubbo</span>=<span class="string">&quot;http://dubbo.apache.org/schema/dubbo&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1. 指定当前服务/应用的名字，与服务名相同 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;user-service-gmall&quot;</span>  &gt;</span><span class="tag">&lt;/<span class="name">dubbo:application</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.使用zookeeper注册中心暴露服务地址 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;dubbo:registry address=&quot;zookeeper://127.0.0.1:2181&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">protocol</span>=<span class="string">&quot;zookeeper&quot;</span> <span class="attr">address</span>=<span class="string">&quot;127.0.0.1:2181&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:registry</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.指定通信规则和端口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">&quot;dubbo&quot;</span> <span class="attr">port</span>=<span class="string">&quot;20880&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">dubbo:protocol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.1声明需要暴露的服务接口 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">&quot;service.UserService&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userServiceImpl&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.2 服务的实现 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dubbo.gmall.service.impl.UserServiceImpl&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>消费者去注册中心订阅服务提供者的服务地址//二者建立连接<ol>
<li>消费者pom.xml引入dubbo,引入zk客户端（同提供者）</li>
<li>配置消费者consumer.xml</li>
<li>设置包扫描路径</li>
</ol>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">&quot;order-service-consumer&quot;</span>  &gt;</span><span class="tag">&lt;/<span class="name">dubbo:application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用zk注册中心暴露发现服务地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">&quot;zookeeper://127.0.0.1:2181&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">dubbo:registry</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 生成远程服务代理，可以和本地bean一样使用demoService --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.dubbo.gmall.service.UserService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.dubbo.gmall.service.impl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/sls7ez.png" alt="效果1"></p>
<p><img src="https://files.catbox.moe/2hr831.png" alt="效果2"></p>
<p><img src="https://files.catbox.moe/0btlgp.png" alt="效果3"></p>
<ol start="3">
<li>连接监控中心</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    连接监控中心--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;dubbo:monitor protocol=&quot;registry&quot; &gt;&lt;/dubbo:monitor&gt; 自适应address--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">address</span>=<span class="string">&quot;127.0.0.1:7070&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:monitor</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Spring-Boot实现"><a href="#Spring-Boot实现" class="headerlink" title="Spring Boot实现"></a>Spring Boot实现</h2><ol>
<li>导入依赖<ol>
<li>导入dubbo-starter</li>
<li>导入dubbo的其他依赖</li>
</ol>
</li>
<li>接口实现，消费者的控制类实现(控制类实现调用服务提供者的服务)<ol>
<li><code>@Service</code>注解<code>import com.alibaba.dubbo.config.annotation.Service</code>注明服务提供者</li>
<li><code>@Reference</code>注明调用提供者的服务并注入，不使用<code>@Autowired</code></li>
</ol>
</li>
<li>配置文件 application.properties<ol>
<li>对应provider.xml 和consumer.xml 相应标签的值</li>
<li>provider和consumer中使用的端口要不一样，否则报错</li>
<li>若consumer端为web项目，需要重设tomcat端口,否则和dubbo-admin冲突<code>server.port=8081</code></li>
</ol>
</li>
</ol>
<p><img src="https://files.catbox.moe/frm20l.png" alt="项目结构"></p>
<p><img src="https://files.catbox.moe/k38hmv.png" alt="consumer"></p>
<p><img src="https://files.catbox.moe/huruct.png" alt="provider"></p>
<p><img src="https://files.catbox.moe/ohrgu8.png" alt="效果1"></p>
<p><img src="https://files.catbox.moe/ju96du.png" alt="效果2"></p>
<p><img src="https://files.catbox.moe/54t0oa.png" alt="效果3"></p>
<p><img src="https://files.catbox.moe/xz2upt.png" alt="效果4"></p>
<h2 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h2><p><strong>覆盖策略</strong></p>
<p><img src="https://files.catbox.moe/frnvch.png" alt="覆盖策略"></p>
<p>优先度：JVM&gt;xml&gt;Properties</p>
<p>JVM:虚拟机参数</p>
<p><img src="https://files.catbox.moe/955nfo.png" alt="JVM">XML：<br>**.xml文件或application.properties文件</p>
<p>Properties:</p>
<p>dubbo.properties文件</p>
<h2 id="配置规则："><a href="#配置规则：" class="headerlink" title="配置规则："></a>配置规则：</h2><ul>
<li><code>check</code>启动时检查，消费者启动时检查相应提供者是否已经启动，未启动则报错，默认为true</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.dubbo.gmall.service.UserService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">check</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">* `&lt;dubbo:consumer: ....&gt;`配置当前消费者的统一规则</span><br><span class="line"></span><br><span class="line">`&lt;dubbo:consumer: check=&quot;false&quot;&gt;<span class="tag">&lt;/<span class="name">dubbo:consumer</span>&gt;</span>`</span><br><span class="line"></span><br><span class="line">* `&lt;dubbo:registry: check=&quot;false&quot;&gt;`注册中心启动时检查</span><br><span class="line">* `timeout`指定超时属性，超过timeout时间无返回则报错，默认为1000(ms)</span><br><span class="line"></span><br><span class="line">  * 方法级优先，接口级次之，全局配置再次之</span><br><span class="line">  * 如果级别一样，则消费方优先，提供方次之</span><br><span class="line">* `retries=&quot;&quot;`重试次数，不包括第一次，第一次失败，再尝试retries次</span><br><span class="line"></span><br><span class="line">  * 第二次尝试会再试第一次的提供方服务器</span><br><span class="line">  * 第三次开始可能会更换别的服务器尝试连接</span><br><span class="line"></span><br><span class="line">## 多版本</span><br><span class="line"></span><br><span class="line">`version`</span><br><span class="line"></span><br><span class="line">`version=&quot;*&quot;`随机版本运行</span><br><span class="line"></span><br><span class="line">## 本地存根</span><br><span class="line"></span><br><span class="line">在调用提供者服务之前，先验证参数符合要求才调用服务</span><br><span class="line"></span><br><span class="line">1. 创建Stub类实现要调用的接口，并在重写函数是添加判断</span><br><span class="line">2. xml配置,stub=&quot;&quot;</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">public class UserServiceStub implements UserService &#123;</span><br><span class="line"></span><br><span class="line">    private final UserService userService;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 传入userService的远程代理对象</span><br><span class="line">     * @param userService</span><br><span class="line">     */</span><br><span class="line">    public UserServiceStub(UserService userService) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /***</span><br><span class="line">     * 本地存根</span><br><span class="line">     * @param userId</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public List<span class="tag">&lt;<span class="name">UserAddress</span>&gt;</span> getUserAddressList(String userId) &#123;</span><br><span class="line">        System.out.println(&quot;UserServiceStub......&quot;);</span><br><span class="line">        if(StringUtils.isEmpty(userId))&#123;</span><br><span class="line">            return userService.getUserAddressList(userId);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">interface</span>=<span class="string">&quot;com.dubbo.gmall.service.UserService&quot;</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">stub</span>=<span class="string">&quot;com.dubbo.gmall.service.UserServiceStub&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://files.catbox.moe/t21cqs.png" alt="本地存根"></p>
<h2 id="SpringBoot与dubbo配置整合"><a href="#SpringBoot与dubbo配置整合" class="headerlink" title="SpringBoot与dubbo配置整合"></a>SpringBoot与dubbo配置整合</h2><ol>
<li>导入dubbo-starter,在application.properties中配置属性，使用<code>@Service</code>暴露服务，<code>@Reference</code>引用服务</li>
<li>保留dubbo的xml配置文件</li>
</ol>
<ul>
<li>相应就可以删除MainApplication中的EnableDubbo，改为<code>@ImportResource(locations=&quot;classpath：**&#123;url&#125;**&quot;)</code></li>
<li>去掉<code>@Service</code>和<code>@Reference</code>注解</li>
</ul>
<ol start="3">
<li>使用API配置类配置<ol>
<li>将每一个组件手动创建到容器中</li>
<li><img src="https://files.catbox.moe/xtx8c2.png" alt="文件结构"></li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDubboConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationConfig <span class="title">applicationConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationConfig applicationConfig = <span class="keyword">new</span> ApplicationConfig();</span><br><span class="line">        applicationConfig.setName(<span class="string">&quot;boot-user-service-provider&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> applicationConfig;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RegistryConfig <span class="title">registryConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RegistryConfig registryConfig = <span class="keyword">new</span> RegistryConfig();</span><br><span class="line">        registryConfig.setAddress(<span class="string">&quot;127.0.0.1:2181&quot;</span>);</span><br><span class="line">        registryConfig.setProtocol(<span class="string">&quot;zookeeper&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registryConfig;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProtocolConfig <span class="title">protocolConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ProtocolConfig protocolConfig = <span class="keyword">new</span> ProtocolConfig();</span><br><span class="line">        protocolConfig.setName(<span class="string">&quot;dubbo&quot;</span>);</span><br><span class="line">        protocolConfig.setPort(<span class="number">20880</span>);</span><br><span class="line">        <span class="keyword">return</span> protocolConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceConfig&lt;UserService&gt; <span class="title">userServiceServiceConfig</span><span class="params">(UserService userService)</span></span>&#123;</span><br><span class="line">        ServiceConfig&lt;UserService&gt; serviceConfig = <span class="keyword">new</span> ServiceConfig&lt;&gt;();</span><br><span class="line">        serviceConfig.setInterface(UserService.class);</span><br><span class="line">        serviceConfig.setRef(userService);</span><br><span class="line"></span><br><span class="line">        MethodConfig methodConfig = <span class="keyword">new</span> MethodConfig();</span><br><span class="line">        methodConfig.setName(<span class="string">&quot;getUserAddressList&quot;</span>);</span><br><span class="line">        methodConfig.setTimeout(<span class="number">1000</span>);</span><br><span class="line">        List&lt;MethodConfig&gt; methods=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        methods.add(methodConfig);</span><br><span class="line">        serviceConfig.setMethods(methods);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> serviceConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h2><h3 id="注册机宕机、Dubbo直连"><a href="#注册机宕机、Dubbo直连" class="headerlink" title="注册机宕机、Dubbo直连"></a>注册机宕机、Dubbo直连</h3><p>注册机宕机后，提供方与消费方可通过本地缓存达成连接</p>
<p>也可以直接使二者直连，而不通过注册机</p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>权重、轮询、、、</p>
<h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p><code>mock=force:return+null</code>：调用即返回空，控制台控制“屏蔽”</p>
<p><code>mock=fall:return+null</code>：调用失败则返回空，不抛出异常，控制台“容错”</p>
<h3 id="集群容错"><a href="#集群容错" class="headerlink" title="集群容错"></a>集群容错</h3><p>默认<code>Failover Cluster</code>，失败自动切换模式</p>
<h3 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h3><p>容错整合</p>
<h2 id="代码阅读笔记"><a href="#代码阅读笔记" class="headerlink" title="代码阅读笔记"></a>代码阅读笔记</h2><h3 id="transient"><a href="#transient" class="headerlink" title="transient"></a><code>transient</code></h3><p>将不需要序列化的属性前添加关键字transient，序列化对象的时候，这个属性就不会被序列化</p>
]]></content>
      <tags>
        <tag>dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2021/07/16/Redis/redis/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="STRING"><a href="#STRING" class="headerlink" title="STRING"></a>STRING</h3><p>二进制安全，可以包含任何数据</p>
<p>大小上下512M</p>
<h3 id="LIST"><a href="#LIST" class="headerlink" title="LIST"></a>LIST</h3><span id="more"></span>
<p>字符串列表</p>
<p>按照插入顺序排序</p>
<p>头部LEFT 尾部RIGHT</p>
<h3 id="HASH"><a href="#HASH" class="headerlink" title="HASH"></a>HASH</h3><p>类似Java.Map</p>
<p>键值对集合</p>
<p>用于存储对象</p>
<h3 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h3><p>STRING 类型的无序集合</p>
<p>内容不重复</p>
<h3 id="ZSET"><a href="#ZSET" class="headerlink" title="ZSET"></a>ZSET</h3><p>SET+</p>
<p>每个元素都会关联一个double 类型的分数score</p>
<p>score可重复</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="key相关"><a href="#key相关" class="headerlink" title="key相关"></a><code>key</code>相关</h3><p><code>set,del,dump,exists,ttl,expire,persist,pexpire,pttl,keys</code></p>
<p>set：插入记录，返回OK成功，重复插入统一个值显示OK，但只要一条记录</p>
<p>get：获取key中的值，无值返回(nil)</p>
<p>del：删除记录，成功显示<code>(interger) 1</code></p>
<p>dump：序列化给定的key</p>
<p>exist：查询给定的Key是否存在，存在返回<code>(interger) 1</code>，否则返回<code>(interger) 0</code></p>
<p>ttl:查询超时时间 单位s，-1表示key存在且未设置过期时间，-2表示key不存在或已过期</p>
<p>pttl：查询超时时间，单位ms</p>
<p>expire:设置过期时间s</p>
<p>pexire:设置过去时间ms</p>
<p>persisit:移出key的过期时间</p>
<p>keys：查询匹配的所有key</p>
<p><img src="https://files.catbox.moe/tuho0h.png" alt="test"></p>
<h3 id="STRING-1"><a href="#STRING-1" class="headerlink" title="STRING"></a><code>STRING</code></h3><p><code>append,decr,decrby,get,getrange,getset,incr,incrby,incrbyfloat,mget,mset,setex,psetex,setnx,msetnx,setrange,strlen</code></p>
<ul>
<li>append:</li>
<li>decr:+1</li>
<li>decrby: +value</li>
<li>get</li>
<li>getrange : get start~end</li>
<li>getset: get 并set</li>
<li>mget,mset：批量get,set</li>
<li>setex: set并设置过期时间</li>
<li>psetex</li>
<li>setnx:不存在时set,成功返回1，失败（已存在）返回0</li>
<li>msetnx:批量setnx，如果有一个存在，则都不执行</li>
<li>setrange:定位set，已存在点覆盖，无值点’\x00’</li>
<li>strlen</li>
</ul>
<p><img src="https://files.catbox.moe/45lje8.png" alt="test2"></p>
<h3 id="STRING中的BIT"><a href="#STRING中的BIT" class="headerlink" title="STRING中的BIT"></a><code>STRING</code>中的<code>BIT</code></h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">getbit,setbit,bitop,bitcount,bitpos</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/cju8za.png" alt="testBit"></p>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><code>lpush,lrange,rpush,rpop,lpop,lindex,ltrim,blpop</code></p>
<p>lpush list value： 从左到右，在list的头部插入数据</p>
<p>rpush list value：从左到右，在list的尾部插入数据</p>
<p>lrange list start end:从左到右显示数据</p>
<p>rpop list:弹出list尾部数据</p>
<p>lpop list:弹出list头部数据</p>
<p>lindex list index:显示指定下标的数据</p>
<p>ltrim list start end:修剪list中start~end以外的部分</p>
<p>blpop list timeout : 阻塞式弹出list最左边的数据，若list为空则阻塞timeout秒</p>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">sadd,srem,sismember,scard,smember,srandmember,spop,smov,sdiff,sdiffstore,sinter,sintersotre,sunion,sunionstore</span><br></pre></td></tr></table></figure>

<ul>
<li>sadd set value:添加</li>
<li>srem set value:删除</li>
<li>sismember set value:判断value是否是set的成员</li>
<li>scard set:set的元素个数</li>
<li>smember set:输出set的元素</li>
<li>srandmember set [count=1]:随机输出count个元素，<ul>
<li>0&lt;count&lt;scard ：随机输出count个元素；</li>
<li>count&gt;scard：输出scard个元素；</li>
<li>-scard&lt;count&lt;0:随机输出count个元素；</li>
<li>count&lt;-scard：随机输出count个元素，可重复</li>
</ul>
</li>
<li>sdiff s1 s2:s1-s2差集</li>
<li>…</li>
</ul>
<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hset,hget,hmset,hmget,hdel,hsetnx,hvals,hkeys,hgetall,hexists,hincrby,hincrbyfloat,hlen,hstrlen</span><br></pre></td></tr></table></figure>

<p><img src="https://files.catbox.moe/iiagj2.png" alt="testHash"></p>
<h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">zadd,zscore,zrange,zrevrange,zcard,zcount,zrangebyscore,zrank,zrevrank,zincrby,zinterstore,zrem,zlexcount,zrangebylex</span><br></pre></td></tr></table></figure>

<ul>
<li>zadd zset member score [member score …] ：增</li>
<li>zscore zset member:查score</li>
<li>zrange zset start end :查</li>
<li>zcard zset</li>
<li>zcount zset min max</li>
<li>zrank zset member</li>
<li>..</li>
<li>zlexcount zset min max:集合中score相同时，字典序下指定成员之间的数量</li>
<li>zrangebylex zset min max：集合中score相同时，字典序下指定成员之间排列</li>
</ul>
<h2 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h2><p><code>subscribe</code></p>
<p><code>publish</code></p>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>MULTI</p>
<h3 id="事务异常"><a href="#事务异常" class="headerlink" title="事务异常"></a>事务异常</h3><p>WATCH</p>
<h2 id="快照持久化"><a href="#快照持久化" class="headerlink" title="快照持久化"></a>快照持久化</h2><p><img src="https://files.catbox.moe/nuok7w.png" alt="dump"></p>
<h2 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a>AOF持久化</h2><h2 id="SpringBoot整合"><a href="#SpringBoot整合" class="headerlink" title="SpringBoot整合"></a>SpringBoot整合</h2><ol>
<li>导入启动器包</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置连接信息</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> </span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">jedis:</span></span><br><span class="line">        <span class="attr">pool:</span></span><br><span class="line">          <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">          <span class="attr">max-idle:</span> <span class="number">500</span></span><br><span class="line">          <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">lettuce:</span></span><br><span class="line">        <span class="attr">shutdown-timeout:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_1</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,String&gt;redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;myKey&quot;</span>,<span class="string">&quot;myValue&quot;</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;myKey&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置序列化器"><a href="#配置序列化器" class="headerlink" title="配置序列化器"></a>配置序列化器</h3><p><strong>不配置序列化器，运行会显示乱码</strong></p>
<p><a href="https://blog.csdn.net/qq_36781505/article/details/86612988">CSDN教程</a></p>
<ol>
<li>entity 实现序列化接口Serializable</li>
<li>配置类设置序列化器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Days&gt;redisTemplate(RedisConnectionFactory factory)&#123;</span><br><span class="line">        RedisTemplate&lt;String,Days&gt;template=<span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        <span class="comment">//关联</span></span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//设置key的序列化器</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        <span class="comment">//设置value的序列化器</span></span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;&gt;(Days.class));</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>测试类:</li>
</ol>
<p><code>@Autowired</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String,Days&gt; redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> Days d;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        d=<span class="keyword">new</span> Days();</span><br><span class="line">        d.setDate(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        d.setDaysId(<span class="string">&quot;456&quot;</span>);</span><br><span class="line">        d.setItemNumber(<span class="number">123</span>);</span><br><span class="line">        d.setOpenId(<span class="string">&quot;dawda&quot;</span>);</span><br><span class="line">        d.setTitle(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(<span class="string">&quot;days&quot;</span>,d);</span><br><span class="line">        System.out.println((redisTemplate.opsForValue().get(<span class="string">&quot;days&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
